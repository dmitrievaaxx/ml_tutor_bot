"""–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tavily –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""

import os
import logging
import re
from typing import Optional

logger = logging.getLogger(__name__)


def _extract_sentences(text: str, max_sentences: int = 3) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–µ N –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        max_sentences: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        
    Returns:
        str: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω
    """
    if not text:
        return "–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞..."
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–Ω–∞–∫–∞–º –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    sentences = re.split(r'([.!?]+\s)', text)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∏—Ö –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    result_sentences = []
    for i in range(0, len(sentences) - 1, 2):
        if i + 1 < len(sentences):
            result_sentences.append(sentences[i] + sentences[i + 1])
        else:
            result_sentences.append(sentences[i])
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ max_sentences –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    preview = ''.join(result_sentences[:max_sentences])
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω (–µ—Å—Ç—å –µ—â–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
    if len(result_sentences) > max_sentences:
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
        preview = preview.rstrip() + "..."
    
    return preview.strip()


async def search_with_tavily(query: str, max_results: int = 3) -> Optional[str]:
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Tavily API
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞/–Ω–µ—Ç –∫–ª—é—á–∞
    """
    logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query[:50]}...")
    
    try:
        api_key = os.getenv('TAVILY_API_KEY')
        logger.info(f"üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ TAVILY_API_KEY: {'–ù–∞–π–¥–µ–Ω' if api_key else '–ù–ï –ù–ê–ô–î–ï–ù'}")
        
        if not api_key:
            logger.warning("‚ö†Ô∏è TAVILY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø–æ–∏—Å–∫")
            return None
        
        from tavily import TavilyClient
        
        # –í –≤–µ—Ä—Å–∏–∏ 0.7.x –∫–ª—é—á –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TAVILY_API_KEY –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        client = TavilyClient()
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç Tavily —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –≤ async —Ñ—É–Ω–∫—Ü–∏–∏)
        response = client.search(
            query,
            max_results=max_results,
            search_depth="basic"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º basic –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        )
        
        logger.info(f"üìä Tavily –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç —Å {len(response.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for i, result in enumerate(response.get('results', []), 1):
            title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            url = result.get('url', '')
            
            logger.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: {title[:50]}...")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Å—ã–ª–∫–∞)
            results.append(f"üìÑ {title}\nüîó {url}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < min(len(response.get('results', [])), max_results):
                results.append("")
        
        if results:
            formatted_response = "\n".join(results)
            logger.info(f"‚úÖ Tavily —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª {len(response.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return formatted_response
        else:
            logger.info("‚ö†Ô∏è Tavily –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return None
        
    except ImportError as e:
        logger.warning(f"‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ tavily –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –û—à–∏–±–∫–∞: {e}. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tavily-python")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Tavily: {type(e).__name__}: {e}")
        import traceback
        logger.debug(f"Traceback: {traceback.format_exc()}")
        return None