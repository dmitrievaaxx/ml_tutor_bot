"""–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Tavily –≤–µ–±-–ø–æ–∏—Å–∫–æ–º"""

import os
import logging
from typing import Optional

logger = logging.getLogger(__name__)


async def search_with_tavily(query: str, max_results: int = 3) -> Optional[str]:
    """
    –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á–µ—Ä–µ–∑ Tavily API
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏–ª–∏ None –µ—Å–ª–∏ –æ—à–∏–±–∫–∞/–Ω–µ—Ç –∫–ª—é—á–∞
    """
    try:
        api_key = os.getenv('TAVILY_API_KEY')
        if not api_key:
            logger.warning("TAVILY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–µ–±-–ø–æ–∏—Å–∫")
            return None
        
        from tavily import AsyncClient
        
        client = AsyncClient(api_key=api_key)
        
        logger.info(f"–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Tavily: {query[:50]}...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        response = await client.search(
            query=query,
            max_results=max_results,
            search_depth="basic"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º basic –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for i, result in enumerate(response.get('results', []), 1):
            title = result.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            content = result.get('content', '–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
            url = result.get('url', '')
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_preview = content[:300].strip()
            if len(content) > 300:
                content_preview += "..."
            
            results.append(f"üìÑ {title}\n{content_preview}")
            if url:
                results.append(f"üîó {url}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if i < min(len(response.get('results', [])), max_results):
                results.append("")
        
        if results:
            formatted_response = "\n".join(results)
            logger.info(f"Tavily –≤–µ—Ä–Ω—É–ª {len(response.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return formatted_response
        else:
            logger.info("Tavily –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return None
        
    except ImportError:
        logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ tavily –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tavily-python")
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ Tavily: {e}")
        return None