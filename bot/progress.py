"""–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

import logging
from typing import Dict, Set, List

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
_user_progress: Dict[int, Set[str]] = {}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—ã –∫—É—Ä—Å–∞ Math
MATH_COURSE_TOPICS = [
    # –õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞
    "math_vectors_operations",
    "math_matrices_operations", 
    "math_eigenvalues_vectors",
    "math_orthogonality_projections",
    "math_svd_pca",
    
    # –ú–∞—Ç–∞–Ω –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    "math_derivatives_partial",
    "math_gradients_chain_rule",
    "math_gradients_matrix_form",
    "math_gradient_descent",
    "math_adam_optimizers",
    "math_convex_functions",
    "math_loss_functions",
    "math_regularization",
    
    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    "math_random_variables",
    "math_expectation_variance",
    "math_bayes_theorem",
    "math_mle",
    "math_entropy_divergence"
]

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—ã –∫—É—Ä—Å–∞ ML
ML_COURSE_TOPICS = [
    # –û—Å–Ω–æ–≤—ã ML
    "ml_introduction",
    "ml_task_types",
    "ml_supervised_unsupervised",
    "ml_overfitting_underfitting",
    "ml_validation_testing",
    
    # –ê–ª–≥–æ—Ä–∏—Ç–º—ã
    "ml_linear_regression",
    "ml_logistic_regression",
    "ml_decision_trees",
    "ml_random_forest",
    "ml_svm",
    "ml_kmeans_clustering",
    "ml_neural_networks",
    
    # –ü—Ä–∞–∫—Ç–∏–∫–∞
    "ml_pandas_numpy",
    "ml_matplotlib_seaborn",
    "ml_scikit_learn",
    "ml_model_evaluation",
    "ml_feature_engineering",
    "ml_real_projects"
]


def get_user_progress(user_id: int) -> Set[str]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Set[str]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ–º
    """
    return _user_progress.get(user_id, set())


def mark_topic_completed(user_id: int, topic_id: str) -> None:
    """
    –û—Ç–º–µ—Ç–∏—Ç—å —Ç–µ–º—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        topic_id: ID —Ç–µ–º—ã
    """
    if user_id not in _user_progress:
        _user_progress[user_id] = set()
    
    _user_progress[user_id].add(topic_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ–º—É: {topic_id}")


def is_topic_completed(user_id: int, topic_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —Ç–µ–º–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        topic_id: ID —Ç–µ–º—ã
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    """
    return topic_id in get_user_progress(user_id)


def get_course_progress(user_id: int, course_type: str) -> Dict[str, bool]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        course_type: –¢–∏–ø –∫—É—Ä—Å–∞ ('math' –∏–ª–∏ 'ml')
        
    Returns:
        Dict[str, bool]: –°–ª–æ–≤–∞—Ä—å {topic_id: is_completed}
    """
    topics = MATH_COURSE_TOPICS if course_type == 'math' else ML_COURSE_TOPICS
    user_progress = get_user_progress(user_id)
    
    return {topic: topic in user_progress for topic in topics}


def get_course_stats(user_id: int, course_type: str) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—É—Ä—Å–∞
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        course_type: –¢–∏–ø –∫—É—Ä—Å–∞ ('math' –∏–ª–∏ 'ml')
        
    Returns:
        Dict[str, int]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {completed, total, percentage}
    """
    progress = get_course_progress(user_id, course_type)
    completed = sum(1 for is_done in progress.values() if is_done)
    total = len(progress)
    percentage = int((completed / total) * 100) if total > 0 else 0
    
    return {
        'completed': completed,
        'total': total,
        'percentage': percentage
    }


def format_course_progress_text(user_id: int, course_type: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫—É—Ä—Å–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        course_type: –¢–∏–ø –∫—É—Ä—Å–∞ ('math' –∏–ª–∏ 'ml')
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    """
    stats = get_course_stats(user_id, course_type)
    progress = get_course_progress(user_id, course_type)
    
    if course_type == 'math':
        course_name = "–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–°–ù–û–í–´ ML"
        topics = MATH_COURSE_TOPICS
        topic_names = [
            "–í–µ–∫—Ç–æ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "–ú–∞—Ç—Ä–∏—Ü—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", 
            "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–µ–∫—Ç–æ—Ä—ã",
            "–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–µ–∫—Ü–∏–∏",
            "SVD –∏ PCA",
            "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏ —á–∞—Å—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ",
            "–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —Ü–µ–ø–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
            "–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤ –º–∞—Ç—Ä–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ",
            "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (GD, SGD)",
            "Adam –∏ –¥—Ä—É–≥–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã",
            "–í—ã–ø—É–∫–ª—ã–µ –∏ –Ω–µ–≤—ã–ø—É–∫–ª—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "–§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å (MSE, Cross-Entropy)",
            "–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è (L1, L2)",
            "–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            "–ú–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ, –¥–∏—Å–ø–µ—Ä—Å–∏—è, –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è",
            "–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Ç–µ–æ—Ä–µ–º–∞",
            "Maximum Likelihood Estimation (MLE)",
            "–≠–Ω—Ç—Ä–æ–ø–∏—è –∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏"
        ]
    else:
        course_name = "–ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï"
        topics = ML_COURSE_TOPICS
        topic_names = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
            "–¢–∏–ø—ã –∑–∞–¥–∞—á ML (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è, —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è)",
            "–û–±—É—á–µ–Ω–∏–µ —Å —É—á–∏—Ç–µ–ª–µ–º vs –±–µ–∑ —É—á–∏—Ç–µ–ª—è",
            "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∏ –Ω–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è",
            "–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è",
            "–î–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π",
            "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å",
            "SVM",
            "K-means –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è",
            "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
            "–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (pandas, numpy)",
            "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (matplotlib, seaborn)",
            "Scikit-learn",
            "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π",
            "Feature Engineering",
            "–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"
        ]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    header = f"üìö **{course_name}**\n\n"
    header += f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['completed']}/{stats['total']} —Ç–µ–º ({stats['percentage']}%)**\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    if course_type == 'math':
        sections = [
            ("‚ñ≤ **–õ–ò–ù–ï–ô–ù–ê–Ø –ê–õ–ì–ï–ë–†–ê**", topics[:5], topic_names[:5]),
            ("‚ñ≤ **–ú–ê–¢–ê–ù –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø**", topics[5:13], topic_names[5:13]),
            ("‚ñ≤ **–í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê**", topics[13:], topic_names[13:])
        ]
    else:
        sections = [
            ("‚ñ≤ **–û–°–ù–û–í–´ ML**", topics[:5], topic_names[:5]),
            ("‚ñ≤ **–ê–õ–ì–û–†–ò–¢–ú–´**", topics[5:12], topic_names[5:12]),
            ("‚ñ≤ **–ü–†–ê–ö–¢–ò–ö–ê**", topics[12:], topic_names[12:])
        ]
    
    result = header
    
    for section_name, section_topics, section_names in sections:
        result += f"{section_name}\n"
        
        for i, (topic_id, topic_name) in enumerate(zip(section_topics, section_names), 1):
            is_completed = progress[topic_id]
            status_icon = "‚úÖ" if is_completed else "‚ùå"
            result += f"{i}. {status_icon} {topic_name}\n"
        
        result += "\n"
    
    return result
