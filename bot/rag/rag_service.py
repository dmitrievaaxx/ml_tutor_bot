"""–û—Å–Ω–æ–≤–Ω–æ–π RAG —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""

import logging
from typing import List, Dict, Any, Optional, Tuple

from .document_processor import DocumentProcessor
from .vector_store import VectorStore

logger = logging.getLogger(__name__)


class RAGService:
    """–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è RAG —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.document_processor = DocumentProcessor()
        self.vector_store = VectorStore()
    
    def process_document(self, file_path: str, user_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏, —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π
        
        Args:
            file_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (KISS –ø—Ä–∏–Ω—Ü–∏–ø)
            self.delete_user_documents(user_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
            doc_data = self.document_processor.process_pdf(file_path)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            chunks = self.document_processor.chunk_text(doc_data['content'])
            
            if not chunks:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫–∏ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ document_id)
            self.vector_store.add_document(
                document_id=user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–∞–∫ document_id
                chunks=chunks,
                metadata=doc_data['metadata'],
                user_id=user_id
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            content_preview = self.document_processor.create_content_preview(doc_data['content'])
            
            result = {
                'success': True,
                'content_preview': content_preview,
                'chunks_count': len(chunks),
                'pages': doc_data['pages'],
                'metadata': doc_data['metadata']
            }
            
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(chunks)} —á–∞–Ω–∫–æ–≤")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def search_and_answer(self, query: str, user_id: int, max_results: int = 3) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_results: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        try:
            logger.info(f"–ü–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query[:50]}...")
            
            # –ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            results = self.vector_store.search(query, user_id, max_results)
            
            if not results:
                return {
                    'found': False,
                    'message': '–í –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É.',
                    'suggestions': self._get_suggestions(query)
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            best_result = results[0]
            max_similarity = best_result['similarity']
            
            if max_similarity > 0.7:
                # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                return self._format_high_quality_response(results, query)
            elif max_similarity > 0.4:
                # –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –≥–∏–±—Ä–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                return self._format_hybrid_response(results, query)
            else:
                # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - fallback
                return self._format_fallback_response(query, results)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                'found': False,
                'message': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.',
                'error': str(e)
            }
    
    def _format_high_quality_response(self, results: List[Dict[str, Any]], query: str) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        sources = []
        content_parts = []
        
        for i, result in enumerate(results, 1):
            metadata = result['metadata']
            title = metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç')
            authors = metadata.get('authors', '')
            
            source_info = f"üìÑ {title}"
            if authors:
                source_info += f" ({authors})"
            
            sources.append(source_info)
            content_parts.append(f"[–ò—Å—Ç–æ—á–Ω–∏–∫ {i}]\n{result['content']}")
        
        return {
            'found': True,
            'quality': 'high',
            'message': f'üìö –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n' + '\n\n'.join(content_parts),
            'sources': sources,
            'similarity': results[0]['similarity']
        }
    
    def _format_hybrid_response(self, results: List[Dict[str, Any]], query: str) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        sources = []
        content_parts = []
        
        for i, result in enumerate(results, 1):
            metadata = result['metadata']
            title = metadata.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç')
            
            sources.append(f"üìÑ {title}")
            content_parts.append(f"[–ß–∞—Å—Ç–∏—á–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ {i}]\n{result['content']}")
        
        return {
            'found': True,
            'quality': 'medium',
            'message': f'üìö –ß–∞—Å—Ç–∏—á–Ω–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:\n\n' + '\n\n'.join(content_parts) + 
                      f'\n\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ç–∞–∫–∂–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–±—â–∏–º –∑–Ω–∞–Ω–∏—è–º –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.',
            'sources': sources,
            'similarity': results[0]['similarity']
        }
    
    def _format_fallback_response(self, query: str, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –æ—Ç–≤–µ—Ç–∞"""
        return {
            'found': False,
            'quality': 'low',
            'message': f'ü§ñ –í –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–æ–ø—Ä–æ—Å—É "{query}".\n\n'
                      f'–†–µ–∫–æ–º–µ–Ω–¥—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∑–Ω–∞–Ω–∏—è –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.',
            'suggestions': self._get_suggestions(query)
        }
    
    def _get_suggestions(self, query: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞"""
        suggestions = [
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏",
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ",
            "–ó–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
        ]
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è ML —Ç–µ–º
        ml_keywords = ['–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å', '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–º–æ–¥–µ–ª—å', '–æ–±—É—á–µ–Ω–∏–µ']
        if any(keyword in query.lower() for keyword in ml_keywords):
            suggestions.extend([
                "–°–ø—Ä–æ—Å–∏—Ç–µ –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –º–æ–¥–µ–ª–∏",
                "–£—Ç–æ—á–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤",
                "–ò–Ω—Ç–µ—Ä–µ—Å—É–π—Ç–µ—Å—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏"
            ])
        
        return suggestions
    
    def delete_user_documents(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.vector_store.delete_user_documents(user_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def delete_document(self, user_id: int, document_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            self.vector_store.delete_document(user_id, document_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç {document_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ {document_id}: {e}")
    
    def get_user_stats(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return self.vector_store.get_user_stats(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                'total_chunks': 0,
                'total_documents': 0,
                'documents': []
            }
