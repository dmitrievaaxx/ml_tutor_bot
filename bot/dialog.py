"""–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–æ–≤"""

import logging
import os
import re

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {chat_id: [{"role": "...", "content": "..."}, ...]}
_dialogs = {}


def clean_response(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        
    Returns:
        str: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """
    # –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # **–∂–∏—Ä–Ω—ã–π** -> –∂–∏—Ä–Ω—ã–π
    text = re.sub(r'\*(.*?)\*', r'\1', text)      # *–∫—É—Ä—Å–∏–≤* -> –∫—É—Ä—Å–∏–≤
    text = re.sub(r'#+\s*(.*)', r'\1', text)      # # –∑–∞–≥–æ–ª–æ–≤–æ–∫ -> –∑–∞–≥–æ–ª–æ–≤–æ–∫
    text = re.sub(r'^\s*[-*]\s*', '', text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏
    text = re.sub(r'^\s*\d+\.\s*', '', text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    
    # –ö–†–ò–¢–ò–ß–ù–û: –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã: —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    allowed_pattern = r'[–∞-—è–ê-–Ø—ë–Å0-9\s\.,!?;:‚Äî‚Äì\-\(\)\"\'\n]'
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = ''.join(char if re.match(allowed_pattern, char) else '' for char in text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–µ (–µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    english_replacements = {
        'basics': '–æ—Å–Ω–æ–≤—ã',
        'learning': '–æ–±—É—á–µ–Ω–∏–µ', 
        'data': '–¥–∞–Ω–Ω—ã–µ',
        'model': '–º–æ–¥–µ–ª—å',
        'algorithm': '–∞–ª–≥–æ—Ä–∏—Ç–º',
        'training': '–æ–±—É—á–µ–Ω–∏–µ',
        'testing': '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        'accuracy': '—Ç–æ—á–Ω–æ—Å—Ç—å',
        'prediction': '–ø—Ä–æ–≥–Ω–æ–∑',
        'feature': '–ø—Ä–∏–∑–Ω–∞–∫',
        'dataset': '–Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö',
        'machine learning': '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
        'neural network': '–Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å',
        'deep learning': '–≥–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
        'supervised': '—Å —É—á–∏—Ç–µ–ª–µ–º',
        'unsupervised': '–±–µ–∑ —É—á–∏—Ç–µ–ª—è',
        'reinforcement': '—Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º',
        'welcome': '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
        'hello': '–ø—Ä–∏–≤–µ—Ç'
    }
    
    for eng, rus in english_replacements.items():
        text = re.sub(r'\b' + eng + r'\b', rus, text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\n\s*\n', '\n\n', text)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã -> –¥–≤–æ–π–Ω—ã–µ
    text = re.sub(r' +', ' ', text)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã -> –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    text = text.strip()
    
    return text


def get_system_prompt(level: str = None) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('–ù–æ–≤–∏—á–æ–∫', '–ë–∞–∑–æ–≤—ã–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π')
        
    Returns:
        str: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    """
    
    # –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–º–ø—Ç–∞ (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π)
    base_prompt = """–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ü–†–ê–í–ò–õ–ê:
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
- –ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π —Ç–æ—á–∫–æ–π

–°–¢–†–£–ö–¢–£–†–ê:
1. –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
2. –ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–æ–≥–∏—è
3. "–ú–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ [—Ç–µ–º–∞1], [—Ç–µ–º–∞2], [—Ç–µ–º–∞3]. –•–æ—á–µ—à—å?"
"""
    
    # –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
    level_prompts = {
        '–ù–æ–≤–∏—á–æ–∫': """
–ù–û–í–ò–ß–û–ö: –ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –∞–Ω–∞–ª–æ–≥–∏–∏ –∏–∑ –∂–∏–∑–Ω–∏, –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤.
""",
        
        '–ë–∞–∑–æ–≤—ã–π': """
–ë–ê–ó–û–í–´–ô: –ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤, –º–æ–∂–Ω–æ —É–ø–æ–º—è–Ω—É—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É.
""",
        
        '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': """
–ü–†–û–î–í–ò–ù–£–¢–´–ô: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, —Ñ–æ—Ä–º—É–ª—ã, –≥–ª—É–±–æ–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.
"""
    }
    
    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    if level not in level_prompts:
        return base_prompt + level_prompts['–ë–∞–∑–æ–≤—ã–π']
    
    return base_prompt + level_prompts[level]


def extract_user_level(chat_id: int) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        
    Returns:
        str: –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ('–ù–æ–≤–∏—á–æ–∫', '–ë–∞–∑–æ–≤—ã–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π') –∏–ª–∏ None
    """
    if chat_id not in _dialogs:
        return None
    
    # –ò—â–µ–º —É—Ä–æ–≤–µ–Ω—å –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for message in _dialogs[chat_id]:
        if message["role"] == "user":
            content = message["content"]
            if content in ['–ù–æ–≤–∏—á–æ–∫', '–ë–∞–∑–æ–≤—ã–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π']:
                return content
    
    return None


def is_first_level_selection(chat_id: int) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –ø–µ—Ä–≤—ã–º
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        
    Returns:
        bool: True –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è, False –µ—Å–ª–∏ —Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è
    """
    if chat_id not in _dialogs:
        return True
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—Ä–æ–≤–Ω—è–º–∏
    level_count = 0
    for message in _dialogs[chat_id]:
        if message["role"] == "user":
            content = message["content"]
            if content in ['–ù–æ–≤–∏—á–æ–∫', '–ë–∞–∑–æ–≤—ã–π', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π']:
                level_count += 1
    
    return level_count <= 1


def get_welcome_message(level: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∞–º–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∞–º–∏
    """
    welcome_messages = {
        '–ù–æ–≤–∏—á–æ–∫': """–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å –æ—Å–Ω–æ–≤!
–†–∞–∑–±–µ—Ä—ë–º—Å—è, —á—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –∏–∑ –∂–∏–∑–Ω–∏üòÑ

–¢—ã —É–∑–Ω–∞–µ—à—å:
ü§ñ —á—Ç–æ —Ç–∞–∫–æ–µ ML –∏ –∑–∞—á–µ–º –æ–Ω–æ –Ω—É–∂–Ω–æ,
üìä –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è,
üß† –∫–∞–∫ —É—á–∞—Ç—Å—è –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏,
üí¨ –∏ –∫–∞–∫ –º–∞—à–∏–Ω—ã –ø–æ–Ω–∏–º–∞—é—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —è–∑—ã–∫

–•–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å? –ù–∞–ø–∏—à–∏:
üëâ ¬´–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?¬ª –∏–ª–∏ ¬´–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏?¬ª""",
        
        '–ë–∞–∑–æ–≤—ã–π': """–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–∏–º —Ç–µ–º–∞–º.
–†–∞–∑–±–µ—Ä—ë–º—Å—è, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.

–¢—ã —É–∑–Ω–∞–µ—à—å:
üìà –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏–Ω–µ–π–Ω–∞—è –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è,
üå≤ —á—Ç–æ –¥–µ–ª–∞—é—Ç –¥–µ—Ä–µ–≤—å—è —Ä–µ—à–µ–Ω–∏–π –∏ –±—É—Å—Ç–∏–Ω–≥,
üß† –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç CNN, RNN –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã,
üí¨ –∏ –∫–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é –º–µ—Ç—Ä–∏–∫ ‚Äî Accuracy, F1, ROC AUC.

–ì–æ—Ç–æ–≤ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?
–ù–∞–ø–∏—à–∏: ¬´–ü–æ–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞¬ª –∏–ª–∏ ¬´–û–±—ä—è—Å–Ω–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä¬ª""",
        
        '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': """–¢—ã –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º —É—Ä–æ–≤–Ω–µ ‚Äî –æ—Ç–ª–∏—á–Ω–æ! 
–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –ø–æ–¥—Ö–æ–¥—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π.

–¢—ã —É–∑–Ω–∞–µ—à—å:
üß† –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã DL (U-Net, ResNet, Transformer, LLM),
üìä –º–µ—Ç–æ–¥—ã –æ–±—É—á–µ–Ω–∏—è (self-supervised, fine-tuning, distillation),
‚öôÔ∏è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã (AdamW, SAM, Lion),
üî¨ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã ‚Äî Diffusion Models, Consistency Models, LCM.

–ú–æ–∂–µ–º –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–æ–Ω–∫–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –º–µ—Ç—Ä–∏–∫–∏, data pipeline –∏ –≤—ã–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.

–ù–∞–ø–∏—à–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
üëâ ¬´–†–∞–∑–±–µ—Ä–∏ LCM¬ª, ¬´–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç attention?¬ª –∏–ª–∏ ¬´–ö–∞–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–∏—Ñ—Ñ—É–∑–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏?¬ª"""
    }
    
    return welcome_messages.get(level, welcome_messages['–ë–∞–∑–æ–≤—ã–π'])


def get_dialog_history(chat_id: int) -> list:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —á–∞—Ç–∞
    
    –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è.
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        
    Returns:
        list: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ OpenAI [{"role": "...", "content": "..."}]
    """
    if chat_id not in _dialogs:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        _dialogs[chat_id] = [
            {"role": "system", "content": get_system_prompt()}
        ]
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è chat_id={chat_id}")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è
        user_level = extract_user_level(chat_id)
        if user_level:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
            new_prompt = get_system_prompt(user_level)
            if _dialogs[chat_id][0]["content"] != new_prompt:
                _dialogs[chat_id][0]["content"] = new_prompt
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è '{user_level}' –≤ chat_id={chat_id}")
    
    return _dialogs[chat_id]


def add_user_message(chat_id: int, message: str):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    history = get_dialog_history(chat_id)
    history.append({"role": "user", "content": message})
    logger.info(
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ chat_id={chat_id}, "
        f"–≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)}"
    )


def add_assistant_message(chat_id: int, message: str):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        message: –û—Ç–≤–µ—Ç –æ—Ç LLM
    """
    history = get_dialog_history(chat_id)
    history.append({"role": "assistant", "content": message})
    logger.info(
        f"–î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ chat_id={chat_id}, "
        f"–≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)}"
    )


def clear_dialog(chat_id: int):
    """
    –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
    """
    if chat_id in _dialogs:
        del _dialogs[chat_id]
        logger.info(f"–û—á–∏—â–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è chat_id={chat_id}")


def get_dialog_stats(chat_id: int) -> dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        
    Returns:
        dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å/–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
    """
    history = get_dialog_history(chat_id)
    
    user_messages = sum(1 for msg in history if msg['role'] == 'user')
    assistant_messages = sum(1 for msg in history if msg['role'] == 'assistant')
    
    return {
        'total': len(history),
        'user': user_messages,
        'assistant': assistant_messages
    }


