"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram-–±–æ—Ç–∞"""

import logging
import random
import base64
from datetime import datetime
from aiogram import Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from llm.client import get_llm_response
from llm.speech_client import transcribe_audio_data
from bot.dialog import (
    get_dialog_history,
    add_user_message,
    add_assistant_message,
    clear_dialog,
    get_dialog_stats,
    clean_response,
    is_first_level_selection,
    get_welcome_message
)
from db.services import UserService, LearningProgressService, UserQuestionService, EducationService
from learning.topic_analyzer import topic_analyzer
from learning.learning_mode import learning_mode_manager
from learning.education_plans import education_plans_manager, EducationDirection
from learning.test_question_generator import TestQuestionGenerator
from bot.database import Database
from bot.test_prompts import TEST_GENERATION_PROMPT


logger = logging.getLogger(__name__)

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç"
THINKING_MESSAGES = [
    "‚è≥ –°–µ–∫—É–Ω–¥—É...",
    "üí≠ –ú–∏–Ω—É—Ç–∫—É...",
    "üîç –ò—â—É –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–±—è...",
    "üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...",
    "üí° –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...",
    "üéì –ì–æ—Ç–æ–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç...",
    "üìö –ü–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–∏–µ –ø—Ä–∏–º–µ—Ä—ã...",
]


def create_questions_mode_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="change_level"),
            InlineKeyboardButton(text="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", callback_data="show_status")
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text="üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è", callback_data="enter_learn_mode")
        ],
        [
            InlineKeyboardButton(text="üìö –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è", callback_data="switch_to_education")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")
        ]
    ])


async def handle_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (–≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ)
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    UserService.get_or_create_user(
        telegram_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞)
    clear_dialog(chat_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùì –†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="mode_questions"),
            InlineKeyboardButton(text="üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è", callback_data="mode_learning")
        ]
    ])
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏, –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ NLP ‚Äî –æ—Ç –æ—Å–Ω–æ–≤ –¥–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n\n"
        "‚ùì **–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤** - –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º ML, DL, NLP, CV, Math. –Ø –æ—Ç–≤–µ—á—É —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π!\n\n"
        "üéì **–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def handle_mode_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (–≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ)
    
    Args:
        callback_query: Callback query –æ—Ç –∫–Ω–æ–ø–∫–∏
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = callback_query.message.chat.id
    data = callback_query.data
    
    logger.info(f"–í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {data}")
    
    try:
        if data == "mode_questions":
            # –†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_novice")],
                [InlineKeyboardButton(text="üü° –ë–∞–∑–æ–≤—ã–π", callback_data="level_basic")],
                [InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")]
            ])
            
            await callback_query.message.edit_text(
                "‚ùì **–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤**\n\n"
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π, —á—Ç–æ–±—ã —è –º–æ–≥ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å:\n\n"
                "üü¢ **–ù–æ–≤–∏—á–æ–∫** - –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏\n"
                "üü° **–ë–∞–∑–æ–≤—ã–π** - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏\n"
                "üî¥ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π** - –≥–ª—É–±–æ–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã\n\n"
                "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º ML, DL, NLP, CV, Math!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif data == "mode_learning":
            # –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Math
            logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üî¢ Math", callback_data="learn_topic_Math")
                ]
            ])
            
            await callback_query.message.edit_text(
                "üéì **–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è**\n\n"
                "–î–æ—Å—Ç—É–ø–µ–Ω –∫—É—Ä—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Å–Ω–æ–≤–∞–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:\n\n"
                "üî¢ **Math** - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã ML\n\n"
                "–ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç 18 —É—Ä–æ–∫–æ–≤ –ø–æ –ª–∏–Ω–µ–π–Ω–æ–π –∞–ª–≥–µ–±—Ä–µ, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            logger.info(f"–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_switch_to_education(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º education
    
    Args:
        callback_query: Callback query –æ—Ç –∫–Ω–æ–ø–∫–∏
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = callback_query.message.chat.id
    
    logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º education –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìö ML", callback_data="edu_direction_ML"),
                InlineKeyboardButton(text="üß† DL", callback_data="edu_direction_DL")
            ],
            [
                InlineKeyboardButton(text="üí¨ NLP", callback_data="edu_direction_NLP"),
                InlineKeyboardButton(text="üëÅÔ∏è CV", callback_data="edu_direction_CV")
            ],
            [
                InlineKeyboardButton(text="üî¢ Math", callback_data="edu_direction_Math")
            ],
            [
                InlineKeyboardButton(text="üöÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_questions")
            ]
        ])
        
        await callback_query.message.edit_text(
            "üìö **–†–µ–∂–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            "üìö **ML** - –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
            "üß† **DL** - –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
            "üí¨ **NLP** - –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞\n"
            "üëÅÔ∏è **CV** - –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ\n"
            "üî¢ **Math** - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã\n\n"
            "–ö–∞–∂–¥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ —Å —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π.",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º education –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_level(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /level
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /level –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_novice")],
        [InlineKeyboardButton(text="üü° –ë–∞–∑–æ–≤—ã–π", callback_data="level_basic")],
        [InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")]
    ])
    
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:",
        reply_markup=keyboard
    )


async def handle_status(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from bot.dialog import extract_user_level
    current_level = extract_user_level(chat_id)
    
    if current_level:
        level_emojis = {
            '–ù–æ–≤–∏—á–æ–∫': 'üü¢',
            '–ë–∞–∑–æ–≤—ã–π': 'üü°', 
            '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π': 'üî¥'
        }
        emoji = level_emojis.get(current_level, 'üìä')
        
        status_message = f"{emoji} –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n\n–ò—Å–ø–æ–ª—å–∑—É–π /level —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"
    else:
        status_message = "üìä –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ /level –¥–ª—è —Å–º–µ–Ω—ã"
    
    await message.answer(status_message)


async def handle_profile(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /profile –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = UserService.get_user_by_telegram_id(user_id)
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
        learning_stats = LearningProgressService.get_learning_statistics(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_message = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        profile_message += f"üìä –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π: {user.current_level or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
        active_session = learning_mode_manager.get_active_session(user_id)
        if active_session:
            profile_message += f"üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: –ê–∫—Ç–∏–≤–µ–Ω (—Ç–µ–º–∞: {active_session.topic})\n"
        else:
            profile_message += f"üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è: –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
        
        profile_message += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        profile_message += f"üìö –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:\n"
        profile_message += f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {learning_stats.get('topics_studied', 0)}\n"
        profile_message += f"‚Ä¢ –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: {learning_stats.get('total_study_time_minutes', 0)} –º–∏–Ω\n"
        profile_message += f"‚Ä¢ –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {learning_stats.get('total_questions', 0)}\n"
        profile_message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {learning_stats.get('average_progress', 0)}%\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        if active_session:
            profile_message += f"üéØ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è:\n"
            profile_message += f"‚Ä¢ –¢–µ–º–∞: {active_session.topic}\n"
            profile_message += f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {active_session.questions_asked}\n"
            profile_message += f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {active_session.correct_answers}\n"
            profile_message += f"‚Ä¢ –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {int((datetime.now() - active_session.start_time).total_seconds() / 60)} –º–∏–Ω\n\n"
        
        profile_message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n"
        
        await message.answer(profile_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_question(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /question
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /question –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        active_session = learning_mode_manager.get_active_session(user_id)
        
        if not active_session:
            await message.answer(
                "‚ùì –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è.\n\n"
                "–í–æ–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /learn —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è."
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
        question = learning_mode_manager.generate_comprehension_question(user_id)
        
        if question:
            await message.answer(f"ü§î –í–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:\n\n{question}")
        else:
            await message.answer(
                "‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–µ–º–µ, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_education(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /education
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /education –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
        education_progress = EducationService.get_user_education_progress(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üìö ML", callback_data="edu_direction_ML"),
                InlineKeyboardButton(text="üß† DL", callback_data="edu_direction_DL")
            ],
            [
                InlineKeyboardButton(text="üí¨ NLP", callback_data="edu_direction_NLP"),
                InlineKeyboardButton(text="üëÅÔ∏è CV", callback_data="edu_direction_CV")
            ],
            [
                InlineKeyboardButton(text="üî¢ Math", callback_data="edu_direction_Math")
            ]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        education_message = "üéì **–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è**\n\n"
        education_message += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:\n\n"
        education_message += "üìö **ML** - –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        education_message += "üß† **DL** - –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
        education_message += "üí¨ **NLP** - –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞\n"
        education_message += "üëÅÔ∏è **CV** - –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ\n"
        education_message += "üî¢ **Math** - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã\n\n"
        
        if education_progress:
            education_message += "üìä **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã:**\n"
            for progress in education_progress[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3
                education_message += f"‚Ä¢ {progress['title']} ({progress['progress_percentage']:.1f}%)\n"
        
        await message.answer(education_message, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_learn(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /learn
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /learn –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        active_session = learning_mode_manager.get_active_session(user_id)
        
        if active_session:
            await message.answer(
                f"üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!\n\n"
                f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {active_session.topic}\n"
                f"–í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {active_session.questions_asked}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {active_session.correct_answers}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_learn —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–º—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–≤–∞–ª –≤–æ–ø—Ä–æ—Å—ã
        user_topics = UserQuestionService.get_user_topics_with_questions(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å Math
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üî¢ Math", callback_data="learn_topic_Math")
            ],
            [
                InlineKeyboardButton(text="üöÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_questions")
            ]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        learn_message = "üéì **–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è**\n\n"
        learn_message += "–î–æ—Å—Ç—É–ø–µ–Ω –∫—É—Ä—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Å–Ω–æ–≤–∞–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:\n\n"
        learn_message += "üî¢ **Math** - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã ML\n\n"
        learn_message += "–ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç 18 —É—Ä–æ–∫–æ–≤ –ø–æ –ª–∏–Ω–µ–π–Ω–æ–π –∞–ª–≥–µ–±—Ä–µ, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π."
        
        await message.answer(learn_message, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_education_direction_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        callback_query: Callback query –æ—Ç –∫–Ω–æ–ø–∫–∏
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = callback_query.message.chat.id
    data = callback_query.data
    
    logger.info(f"–í—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {data}")
    
    try:
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö –±–ª–æ–∫–∞—Ö)
        direction_mapping = {
            "ML": EducationDirection.ML,
            "DL": EducationDirection.DL,
            "NLP": EducationDirection.NLP,
            "CV": EducationDirection.CV,
            "Math": EducationDirection.MATH
        }
        
        if data.startswith("edu_direction_"):
            direction_str = data.replace("edu_direction_", "")
            
            direction = direction_mapping.get(direction_str)
            if not direction:
                await callback_query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–ª–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            plan = education_plans_manager.get_plan(direction)
            if not plan:
                await callback_query.message.edit_text(
                    f"‚ùå –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è {direction.value} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"edu_start_{direction.value}")
                ],
                [
                    InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data=f"edu_plan_{direction.value}")
                ],
                [
                    InlineKeyboardButton(text="‚ùì –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_questions")
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edu_back")
                ]
            ])
            
            await callback_query.message.edit_text(
                f"üìö **{plan.title}**\n\n"
                f"{plan.description}\n\n"
                f"üìñ **–£—Ä–æ–∫–æ–≤ –≤ –∫—É—Ä—Å–µ:** {len(plan.lessons)}\n"
                f"‚è±Ô∏è **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** {len(plan.lessons) * 15} –º–∏–Ω—É—Ç\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        elif data.startswith("edu_start_"):
            # –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ
            direction_str = data.replace("edu_start_", "")
            direction = direction_mapping.get(direction_str)
            
            if direction:
                # –ù–∞—á–∏–Ω–∞–µ–º —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω
                success = EducationService.start_education_plan(user_id, direction)
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
                    lesson_info = EducationService.get_current_lesson(user_id, direction.value)
                    
                    if lesson_info:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞", callback_data=f"edu_prev_{direction.value}_{lesson_info['lesson_id']}"),
                                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ ‚û°Ô∏è", callback_data=f"edu_next_{direction.value}_{lesson_info['lesson_id']}")
                            ],
                            [
                                InlineKeyboardButton(text="üìù –¢–µ—Å—Ç", callback_data=f"edu_test_{direction.value}_{lesson_info['lesson_id']}")
                            ],
                            [
                                InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"edu_progress_{direction.value}"),
                                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"edu_direction_{direction.value}")
                            ]
                        ])
                        
                        await callback_query.message.edit_text(
                            f"üìò –£—Ä–æ–∫ {lesson_info['lesson_number']}. {lesson_info['title']}\n\n"
                            f"{lesson_info['content']}",
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        await callback_query.message.edit_text(
                            f"‚úÖ –£—á–µ–±–Ω—ã–π –ø–ª–∞–Ω '{direction.value}' –Ω–∞—á–∞—Ç!\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /education —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
                        )
                else:
                    await callback_query.message.edit_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
        
        elif data.startswith("edu_plan_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –∫—É—Ä—Å–∞
            direction_str = data.replace("edu_plan_", "")
            direction = direction_mapping.get(direction_str)
            
            if direction:
                plan = education_plans_manager.get_plan(direction)
                if plan:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                    plan_text = f"üìö **{plan.title.replace('üìö ', '')}**\n\n"
                    
                    if direction.value == "Math":
                        plan_text += "‚ñ≤ **–õ–ò–ù–ï–ô–ù–ê–Ø –ê–õ–ì–ï–ë–†–ê**\n"
                        for i in range(1, 6):  # —É—Ä–æ–∫–∏ 1-5
                            if i <= len(plan.lessons):
                                lesson = plan.lessons[i-1]
                                plan_text += f"{i}. {lesson.title}\n"
                        
                        plan_text += "\n‚ñ≤ **–ú–ê–¢–ê–ù –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø**\n"
                        # –£—Ä–æ–∫–∏ 6-7: –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
                        for i in range(6, 8):
                            if i <= len(plan.lessons):
                                lesson = plan.lessons[i-1]
                                plan_text += f"{i}. {lesson.title}\n"
                        # –£—Ä–æ–∫ 8: –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤ –º–∞—Ç—Ä–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ (–±—ã–ª —É—Ä–æ–∫ 13)
                        if len(plan.lessons) >= 13:
                            lesson = plan.lessons[12]  # –∏–Ω–¥–µ–∫—Å 12 = —É—Ä–æ–∫ 13
                            plan_text += f"8. {lesson.title}\n"
                        # –£—Ä–æ–∫–∏ 9-13: –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Ä–æ–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                        for i in range(9, 14):
                            if i <= len(plan.lessons):
                                lesson = plan.lessons[i-1]
                                plan_text += f"{i}. {lesson.title}\n"
                        
                        plan_text += "\n‚ñ≤ **–í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê**\n"
                        for i in range(14, 19):  # —É—Ä–æ–∫–∏ 14-18
                            if i <= len(plan.lessons):
                                lesson = plan.lessons[i-1]
                                plan_text += f"{i}. {lesson.title}\n"
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫—É—Ä—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
                        for i, lesson in enumerate(plan.lessons, 1):
                            plan_text += f"{i}. **{lesson.title}**\n   {lesson.description}\n\n"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"edu_start_{direction.value}")
                        ],
                        [
                            InlineKeyboardButton(text="‚ùì –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_questions")
                        ],
                        [
                            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="edu_back")
                        ]
                    ])
                    
                    await callback_query.message.edit_text(
                        plan_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
        
        elif data.startswith("edu_prev_"):
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–∫—É
            # –ü–∞—Ä—Å–∏–º: edu_prev_Math_math_linear_1 -> direction=Math, lesson_id=math_linear_1
            data_parts = data.split("_", 3)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 4 —á–∞—Å—Ç–∏
            if len(data_parts) >= 4:
                direction_str = data_parts[2]
                current_lesson_id = data_parts[3]
                direction = direction_mapping.get(direction_str)
                
                if direction:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–∫
                    plan = education_plans_manager.get_plan(direction)
                    if plan:
                        current_index = None
                        for i, lesson in enumerate(plan.lessons):
                            if lesson.id == current_lesson_id:
                                current_index = i
                                break
                        
                        if current_index is not None and current_index > 0:
                            prev_lesson = plan.lessons[current_index - 1]
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞", callback_data=f"edu_prev_{direction.value}_{prev_lesson.id}"),
                                    InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ ‚û°Ô∏è", callback_data=f"edu_next_{direction.value}_{prev_lesson.id}")
                                ],
                                [
                                    InlineKeyboardButton(text="üìù –¢–µ—Å—Ç", callback_data=f"edu_test_{direction.value}_{prev_lesson.id}")
                                ],
                                [
                                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"edu_direction_{direction.value}")
                                ]
                            ])
                            
                            await callback_query.message.edit_text(
                                f"üìò –£—Ä–æ–∫ {current_index + 1}. {prev_lesson.title}\n\n"
                                f"{prev_lesson.content}",
                                reply_markup=keyboard,
                                parse_mode=None
                            )
                        else:
                            await callback_query.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫ –∫—É—Ä—Å–∞", show_alert=True)
        
        elif data.startswith("edu_next_"):
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
            # –ü–∞—Ä—Å–∏–º: edu_next_Math_math_linear_1 -> direction=Math, lesson_id=math_linear_1
            data_parts = data.split("_", 3)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 4 —á–∞—Å—Ç–∏
            if len(data_parts) >= 4:
                direction_str = data_parts[2]
                current_lesson_id = data_parts[3]
                direction = direction_mapping.get(direction_str)
                
                logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É: direction={direction_str}, current_lesson_id={current_lesson_id}")
                
                if direction:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                    plan = education_plans_manager.get_plan(direction)
                    if plan:
                        current_index = None
                        for i, lesson in enumerate(plan.lessons):
                            if lesson.id == current_lesson_id:
                                current_index = i
                                break
                        
                        logger.info(f"–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —É—Ä–æ–∫–∞: {current_index}, –≤—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {len(plan.lessons)}")
                        
                        if current_index is not None and current_index < len(plan.lessons) - 1:
                            next_lesson = plan.lessons[current_index + 1]
                            
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞", callback_data=f"edu_prev_{direction.value}_{next_lesson.id}"),
                                    InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ ‚û°Ô∏è", callback_data=f"edu_next_{direction.value}_{next_lesson.id}")
                                ],
                                [
                                    InlineKeyboardButton(text="üìù –¢–µ—Å—Ç", callback_data=f"edu_test_{direction.value}_{next_lesson.id}")
                                ],
                                [
                                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"edu_direction_{direction.value}")
                                ]
                            ])
                            
                            await callback_query.message.edit_text(
                                f"üìò –£—Ä–æ–∫ {current_index + 2}. {next_lesson.title}\n\n"
                                f"{next_lesson.content}",
                                reply_markup=keyboard,
                                parse_mode=None
                            )
                        else:
                            await callback_query.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–∫ –∫—É—Ä—Å–∞", show_alert=True)
        
        elif data.startswith("edu_test_"):
            # –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É
            # –ü–∞—Ä—Å–∏–º: edu_test_Math_math_linear_1 -> direction=Math, lesson_id=math_linear_1
            data_parts = data.split("_", 3)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 4 —á–∞—Å—Ç–∏
            if len(data_parts) >= 4:
                direction_str = data_parts[2]
                lesson_id = data_parts[3]
                direction = direction_mapping.get(direction_str)
                
                if direction:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
                    lesson_info = EducationService.get_lesson_by_id(lesson_id)
                    
                    if lesson_info:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                        await callback_query.message.edit_text(
                            "üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å...",
                            parse_mode=None
                        )
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ OpenRouter API
                        test_generator = TestQuestionGenerator()
                        test_data = await test_generator.generate_test_question(
                            lesson_info['title'],
                            lesson_info['content']
                        )
                        
                        if test_data:
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [
                                    InlineKeyboardButton(text=f"1Ô∏è‚É£ {test_data['options'][0]}", callback_data=f"test_answer_{direction.value}_{lesson_id}_0")
                                ],
                                [
                                    InlineKeyboardButton(text=f"2Ô∏è‚É£ {test_data['options'][1]}", callback_data=f"test_answer_{direction.value}_{lesson_id}_1")
                                ],
                                [
                                    InlineKeyboardButton(text=f"3Ô∏è‚É£ {test_data['options'][2]}", callback_data=f"test_answer_{direction.value}_{lesson_id}_2")
                                ],
                                [
                                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edu_lesson_{direction.value}_{lesson_id}")
                                ]
                            ])
                            
                            await callback_query.message.edit_text(
                                f"üìù **–¢–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É:** {lesson_info['title']}\n\n"
                                f"**–í–æ–ø—Ä–æ—Å:**\n{test_data['question']}\n\n"
                                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                                reply_markup=keyboard,
                                parse_mode=None
                            )
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
                            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                            if not hasattr(callback_query.from_user, 'test_data'):
                                callback_query.from_user.test_data = {}
                            callback_query.from_user.test_data[f"{direction.value}_{lesson_id}"] = test_data
                        else:
                            await callback_query.message.edit_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edu_lesson_{direction.value}_{lesson_id}")]
                                ]),
                                parse_mode=None
                            )
                    else:
                        await callback_query.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        
        elif data.startswith("test_answer_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç
            parts = data.split("_")
            if len(parts) >= 5:
                direction_str = parts[2]
                lesson_id = parts[3]
                answer_index = int(parts[4])
                direction = direction_mapping.get(direction_str)
                
                if direction:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
                    test_key = f"{direction.value}_{lesson_id}"
                    if hasattr(callback_query.from_user, 'test_data') and test_key in callback_query.from_user.test_data:
                        test_data = callback_query.from_user.test_data[test_key]
                        
                        is_correct = answer_index == test_data['correct_answer']
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
                        lesson_info = EducationService.get_lesson_by_id(lesson_id)
                        
                        if is_correct:
                            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –æ—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π
                            user_service = UserService(callback_query.bot.get('db'))
                            user = user_service.get_user_by_telegram_id(callback_query.from_user.id)
                            
                            if user:
                                progress_service = LearningProgressService(callback_query.bot.get('db'))
                                progress_service.mark_lesson_completed(user.id, lesson_id)
                            
                            result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω!"
                            explanation_text = f"\n\n**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {test_data['explanation']}"
                            
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edu_lesson_{direction.value}_{lesson_id}")],
                                [InlineKeyboardButton(text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"edu_progress_{direction.value}")]
                            ])
                        else:
                            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç - –æ–±—ä—è—Å–Ω—è–µ–º –æ—à–∏–±–∫—É
                            result_text = "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
                            explanation_text = f"\n\n**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {test_data['explanation']}\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–µ—Å—Ç' –µ—â–µ —Ä–∞–∑ - –±—É–¥–µ—Ç –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å."
                            
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text="üìù –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"edu_test_{direction.value}_{lesson_id}")],
                                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Ä–æ–∫—É", callback_data=f"edu_lesson_{direction.value}_{lesson_id}")]
                            ])
                        
                        await callback_query.message.edit_text(
                            f"{result_text}{explanation_text}",
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                        
                        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∏–∑ —Å–µ—Å—Å–∏–∏
                        if hasattr(callback_query.from_user, 'test_data'):
                            del callback_query.from_user.test_data[test_key]
                    else:
                        await callback_query.answer("–î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        
        elif data.startswith("edu_progress_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            direction_str = data.split("_")[2]
            direction = direction_mapping.get(direction_str)
            
            if direction:
                user_service = UserService(callback_query.bot.get('db'))
                user = user_service.get_user_by_telegram_id(callback_query.from_user.id)
                
                if user:
                    progress_service = LearningProgressService(callback_query.bot.get('db'))
                    progress_info = progress_service.get_user_progress(user.id, direction.value)
                    
                    if "error" not in progress_info:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                        progress_text = f"üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É {direction.value}**\n\n"
                        progress_text += f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {progress_info['completed_lessons']}/{progress_info['total_lessons']}\n"
                        progress_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {progress_info['completion_percentage']:.1f}%\n\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
                        progress_text += "**–£—Ä–æ–∫–∏:**\n"
                        for lesson in progress_info['lessons']:
                            status = "‚úÖ" if lesson['is_completed'] else "‚è≥"
                            progress_text += f"{status} {lesson['lesson_number']}. {lesson['title']}\n"
                        
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"edu_start_{direction.value}")]
                        ])
                        
                        await callback_query.message.edit_text(
                            progress_text,
                            reply_markup=keyboard,
                            parse_mode=None
                        )
                    else:
                        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", show_alert=True)
        
        elif data.startswith("edu_lesson_"):
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É
            # –ü–∞—Ä—Å–∏–º: edu_lesson_Math_math_linear_1 -> direction=Math, lesson_id=math_linear_1
            data_parts = data.split("_", 3)  # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 4 —á–∞—Å—Ç–∏
            if len(data_parts) >= 4:
                direction_str = data_parts[2]
                lesson_id = data_parts[3]
                direction = direction_mapping.get(direction_str)
                
                if direction:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
                    lesson_info = EducationService.get_lesson_by_id(lesson_id)
                    
                    if lesson_info:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞
                        plan = education_plans_manager.get_plan(direction)
                        lesson_number = 1
                        if plan:
                            for i, lesson in enumerate(plan.lessons):
                                if lesson.id == lesson_id:
                                    lesson_number = i + 1
                                    break
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                            [
                                InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–µ–º–∞", callback_data=f"edu_prev_{direction.value}_{lesson_id}"),
                                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞ ‚û°Ô∏è", callback_data=f"edu_next_{direction.value}_{lesson_id}")
                            ],
                            [
                                InlineKeyboardButton(text="üìù –¢–µ—Å—Ç", callback_data=f"edu_test_{direction.value}_{lesson_id}")
                            ],
                            [
                                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"edu_direction_{direction.value}")
                            ]
                        ])
                        
                        await callback_query.message.edit_text(
                            f"üìò –£—Ä–æ–∫ {lesson_number}. {lesson_info['title']}\n\n"
                            f"{lesson_info['content']}",
                            reply_markup=keyboard,
                            parse_mode=None
                        )
        
        elif data == "back_to_questions":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∂–∏–º—É –≤–æ–ø—Ä–æ—Å–æ–≤
            keyboard = create_questions_mode_keyboard()
            
            await callback_query.message.edit_text(
                "‚ùì **–†–µ–∂–∏–º –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤**\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é, "
                "–∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–∏—Ö —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ "
                "–ø–æ–Ω—è—Ç–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç!",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        elif data == "edu_back":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üìö ML", callback_data="edu_direction_ML"),
                    InlineKeyboardButton(text="üß† DL", callback_data="edu_direction_DL")
                ],
                [
                    InlineKeyboardButton(text="üí¨ NLP", callback_data="edu_direction_NLP"),
                    InlineKeyboardButton(text="üëÅÔ∏è CV", callback_data="edu_direction_CV")
                ],
                [
                    InlineKeyboardButton(text="üî¢ Math", callback_data="edu_direction_Math")
                ]
            ])
            
            await callback_query.message.edit_text(
                "üéì **–°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è:\n\n"
                "üìö **ML** - –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
                "üß† **DL** - –ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
                "üí¨ **NLP** - –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞\n"
                "üëÅÔ∏è **CV** - –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ\n"
                "üî¢ **Math** - –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_test_answer(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    
    Args:
        callback_query: Callback query –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = callback_query.message.chat.id
    data = callback_query.data
    
    logger.info(f"=== handle_test_answer –í–´–ó–í–ê–ù–ê ===")
    logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {data}")
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data: test_answer_{lesson_id}_{question_index}_{answer_index}
        # –§–æ—Ä–º–∞—Ç: test_answer_math_linear_1_0_0
        # lesson_id –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –ø–∞—Ä—Å–∏–º —Å –∫–æ–Ω—Ü–∞
        parts = data.split("_")
        logger.info(f"–†–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏: {parts}")
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π: {len(parts)}")
        
        if len(parts) < 5:
            logger.error(f"–û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å –º–∏–Ω–∏–º—É–º 5 —á–∞—Å—Ç–µ–π, –ø–æ–ª—É—á–µ–Ω–æ {len(parts)}")
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞")
            return
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω—Ü–∞
        answer_index = int(parts[-1])  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
        question_index = int(parts[-2])  # –ü—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å
        lesson_id = "_".join(parts[2:-2])  # –í—Å–µ —á–∞—Å—Ç–∏ –º–µ–∂–¥—É test_answer –∏ question_index
        
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
        logger.info(f"  lesson_id: {lesson_id}")
        logger.info(f"  question_index: {question_index}")
        logger.info(f"  answer_index: {answer_index}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        lesson_info = EducationService.get_lesson_by_id(lesson_id)
        if not lesson_info:
            await callback_query.message.edit_text("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        question = lesson_info['test_questions'][question_index]
        is_correct = answer_index == question['correct_answer']
        
        logger.info(f"–í–æ–ø—Ä–æ—Å: {question['question']}")
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {answer_index} - {question['options'][answer_index]}")
        logger.info(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct_answer']} - {question['options'][question['correct_answer']]}")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü—Ä–∞–≤–∏–ª—å–Ω–æ' if is_correct else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
        EducationService.submit_test_answer(
            user_id, lesson_id, question_index, 
            question['options'][answer_index], 
            question['options'][question['correct_answer']], 
            is_correct, question['explanation']
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if is_correct:
            result_text = "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**"
        else:
            result_text = f"‚ùå **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['correct_answer']]}"
        
        result_text += f"\n\nüí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:**\n{question['explanation']}"
        
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_text[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
        if question_index < 2:  # –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã (0, 1, 2)
            next_question = lesson_info['test_questions'][question_index + 1]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=f"1Ô∏è‚É£ {next_question['options'][0]}", callback_data=f"test_answer_{lesson_id}_{question_index + 1}_0")
                ],
                [
                    InlineKeyboardButton(text=f"2Ô∏è‚É£ {next_question['options'][1]}", callback_data=f"test_answer_{lesson_id}_{question_index + 1}_1")
                ],
                [
                    InlineKeyboardButton(text=f"3Ô∏è‚É£ {next_question['options'][2]}", callback_data=f"test_answer_{lesson_id}_{question_index + 1}_2")
                ]
            ])
            
            await callback_query.message.edit_text(
                f"{result_text}\n\n"
                f"üìñ **–í–æ–ø—Ä–æ—Å {question_index + 2} –∏–∑ 3:**\n{next_question['question']}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            test_results = EducationService.get_lesson_test_results(user_id, lesson_id)
            correct_count = sum(1 for result in test_results if result['is_correct'])
            
            if correct_count == 3:
                # –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ
                EducationService.complete_lesson(user_id, lesson_id)
                await callback_query.message.edit_text(
                    f"{result_text}\n\n"
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}/3\n"
                    f"üìö –£—Ä–æ–∫: {lesson_info['title']}\n\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫.",
                    parse_mode="Markdown"
                )
            else:
                # –£—Ä–æ–∫ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω
                await callback_query.message.edit_text(
                    f"{result_text}\n\n"
                    f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
                    f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}/3\n"
                    f"üìö –£—Ä–æ–∫: {lesson_info['title']}\n\n"
                    f"–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ 3 –≤–æ–ø—Ä–æ—Å–∞.\n"
                    f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç, –Ω–∞–ø–∏—Å–∞–≤ '—Ç–µ—Å—Ç'.",
                    parse_mode="Markdown"
                )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_lesson_test_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É—Ä–æ–∫—É
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        education_progress = EducationService.get_user_education_progress(user_id)
        
        if not education_progress:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /education —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω —Å —Ç–µ–∫—É—â–∏–º —É—Ä–æ–∫–æ–º
        current_plan = None
        for progress in education_progress:
            if progress['current_lesson_id']:
                current_plan = progress
                break
        
        if not current_plan:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /education —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
        lesson_info = EducationService.get_current_lesson(user_id, current_plan['plan_key'])
        
        if not lesson_info:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /education."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
        test_results = EducationService.get_lesson_test_results(user_id, lesson_info['lesson_id'])
        
        if test_results:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            correct_count = sum(1 for result in test_results if result['is_correct'])
            total_questions = len(test_results)
            
            await message.answer(
                f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}/{total_questions}\n"
                f"üìö –£—Ä–æ–∫: {lesson_info['title']}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ? –ù–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
            )
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        first_question = lesson_info['test_questions'][0]
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"1Ô∏è‚É£ {first_question['options'][0]}", callback_data=f"test_answer_{lesson_info['lesson_id']}_0_0")
            ],
            [
                InlineKeyboardButton(text=f"2Ô∏è‚É£ {first_question['options'][1]}", callback_data=f"test_answer_{lesson_info['lesson_id']}_0_1")
            ],
            [
                InlineKeyboardButton(text=f"3Ô∏è‚É£ {first_question['options'][2]}", callback_data=f"test_answer_{lesson_info['lesson_id']}_0_2")
            ]
        ])
        
        await message.answer(
            f"üìù **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É: {lesson_info['title']}**\n\n"
            f"üìñ **–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:**\n{first_question['question']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_lesson_test_answer(message: Message) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    user_text = message.text
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        education_progress = EducationService.get_user_education_progress(user_id)
        
        if not education_progress:
            return False
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω —Å —Ç–µ–∫—É—â–∏–º —É—Ä–æ–∫–æ–º
        current_plan = None
        for progress in education_progress:
            if progress['current_lesson_id']:
                current_plan = progress
                break
        
        if not current_plan:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
        lesson_info = EducationService.get_current_lesson(user_id, current_plan['plan_key'])
        
        if not lesson_info:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
        test_results = EducationService.get_lesson_test_results(user_id, lesson_info['lesson_id'])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        next_question_number = len(test_results) + 1
        
        if next_question_number > 3:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω—ã
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç –∏ –Ω–∞–ø–∏—Å–∞–ª –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
        if len(user_text) < 200 and next_question_number <= 3:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å {next_question_number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
            is_correct, correct_answer, explanation = EducationService.submit_test_answer(
                user_id, 
                current_plan['plan_key'], 
                lesson_info['lesson_id'], 
                next_question_number, 
                user_text
            )
            
            if is_correct:
                await message.answer(
                    f"‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                    f"üìù **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {correct_answer}\n\n"
                    f"üí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation}",
                    parse_mode="Markdown"
                )
            else:
                await message.answer(
                    f"‚ùå **–ù–µ —Å–æ–≤—Å–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ.**\n\n"
                    f"üìù **–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:** {correct_answer}\n\n"
                    f"üí° **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:** {explanation}",
                    parse_mode="Markdown"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
            updated_test_results = EducationService.get_lesson_test_results(user_id, lesson_info['lesson_id'])
            correct_count = sum(1 for result in updated_test_results if result['is_correct'])
            
            if len(updated_test_results) >= 3:
                # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
                if correct_count == 3:
                    # –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ - —É—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω
                    EducationService.complete_lesson(user_id, current_plan['plan_key'], lesson_info['lesson_id'])
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫
                    next_lesson = EducationService.get_current_lesson(user_id, current_plan['plan_key'])
                    
                    if next_lesson:
                        await message.answer(
                            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                            f"‚úÖ –í—Å–µ 3 –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–≤–µ—á–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n"
                            f"üìö **–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫:** {next_lesson['title']}\n"
                            f"üìñ –£—Ä–æ–∫ {next_lesson['lesson_number']}/{next_lesson['total_lessons']}\n\n"
                            f"–ù–∞–ø–∏—à–∏—Ç–µ '—Ç–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.",
                            parse_mode=None
                        )
                    else:
                        await message.answer(
                            f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                            f"‚úÖ –í—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ '{current_plan['title']}' –ø—Ä–æ–π–¥–µ–Ω—ã!\n\n"
                            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /education —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å.",
                            parse_mode=None
                        )
                else:
                    # –ù–µ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                    await message.answer(
                        f"üìä **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
                        f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count}/3\n\n"
                        f"–£—Ä–æ–∫ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π. –í—ã –º–æ–∂–µ—Ç–µ:\n"
                        f"‚Ä¢ –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É (–Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞–ª—å—à–µ')\n"
                        f"‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–∑–∂–µ (–Ω–∞–ø–∏—à–∏—Ç–µ '—Ç–µ—Å—Ç')\n\n"
                        f"–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?",
                        parse_mode="Markdown"
                    )
            else:
                # –ï—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
                await message.answer(
                    f"üìù **–í–æ–ø—Ä–æ—Å {next_question_number + 1} –∏–∑ 3:**\n{lesson_info['test_questions'][next_question_number]}\n\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                    parse_mode="Markdown"
                )
            
            return True
        
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def handle_next_lesson(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        education_progress = EducationService.get_user_education_progress(user_id)
        
        if not education_progress:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /education —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω —Å —Ç–µ–∫—É—â–∏–º —É—Ä–æ–∫–æ–º
        current_plan = None
        for progress in education_progress:
            if progress['current_lesson_id']:
                current_plan = progress
                break
        
        if not current_plan:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /education —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
        lesson_info = EducationService.get_current_lesson(user_id, current_plan['plan_key'])
        
        if not lesson_info:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /education."
            )
            return
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
        success = EducationService.move_to_next_lesson(user_id, current_plan['plan_key'], lesson_info['lesson_id'])
        
        if success:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ
            next_lesson = EducationService.get_current_lesson(user_id, current_plan['plan_key'])
            
            if next_lesson:
                await message.answer(
                    f"‚û°Ô∏è **–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É!**\n\n"
                    f"üìö **–£—Ä–æ–∫ {next_lesson['lesson_number']}/{next_lesson['total_lessons']}:** {next_lesson['title']}\n\n"
                    f"{next_lesson['content']}\n\n"
                    f"–ì–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é? –ù–∞–ø–∏—à–∏—Ç–µ '—Ç–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —ç—Ç–æ–º—É —É—Ä–æ–∫—É.",
                    parse_mode="Markdown"
                )
            else:
                await message.answer(
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                    f"‚úÖ –í—Å–µ —É—Ä–æ–∫–∏ –∫—É—Ä—Å–∞ '{current_plan['title']}' –ø—Ä–æ–π–¥–µ–Ω—ã!\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /education —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å.",
                    parse_mode="Markdown"
                )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /education."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_retry_test(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        education_progress = EducationService.get_user_education_progress(user_id)
        
        if not education_progress:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /education —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞–Ω —Å —Ç–µ–∫—É—â–∏–º —É—Ä–æ–∫–æ–º
        current_plan = None
        for progress in education_progress:
            if progress['current_lesson_id']:
                current_plan = progress
                break
        
        if not current_plan:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /education —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ
        lesson_info = EducationService.get_current_lesson(user_id, current_plan['plan_key'])
        
        if not lesson_info:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–∫–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /education."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞
        test_results = EducationService.get_lesson_test_results(user_id, lesson_info['lesson_id'])
        
        if not test_results:
            # –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            await message.answer(
                f"üìù **–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É: {lesson_info['title']}**\n\n"
                f"üìñ **–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:**\n{lesson_info['test_questions'][0]}\n\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                parse_mode="Markdown"
            )
        else:
            # –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            correct_count = sum(1 for result in test_results if result['is_correct'])
            total_questions = len(test_results)
            
            await message.answer(
                f"üîÑ **–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É: {lesson_info['title']}**\n\n"
                f"üìä **–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** {correct_count}/{total_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n\n"
                f"üìù **–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:**\n{lesson_info['test_questions'][0]}\n\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:",
                parse_mode="Markdown"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_mode(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /mode
    
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –º–µ–∂–¥—É —Ä–µ–∂–∏–º–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Ä–µ–∂–∏–º–æ–º –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /mode –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùì –†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="mode_questions"),
            InlineKeyboardButton(text="üéì –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è", callback_data="mode_learning")
        ]
    ])
    
    await message.answer(
        "üîÑ **–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:\n\n"
        "‚ùì **–†–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤** - –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º ML, DL, NLP, CV, Math. –Ø –æ—Ç–≤–µ—á—É —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π!\n\n"
        "üéì **–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è** - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def handle_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    help_message = """‚ùì **–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏**
        
        üöÄ **–†–µ–∂–∏–º –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤** (–æ—Å–Ω–æ–≤–Ω–æ–π):
        ‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º ML, DL, NLP, CV, Math
        ‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, —Å—Ö–µ–º–∞–º–∏, –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
        ‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        
        üéì **–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è**:
        ‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ + –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π
        ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        üìö **–†–µ–∂–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è**:
        ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (ML, DL, NLP, CV, Math)
        ‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —É—Ä–æ–∫–∏ —Å —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
        
        üìä **–ö–æ–º–∞–Ω–¥—ã**:
        ‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–µ–∂–∏–º–∞
        ‚Ä¢ /mode - —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        ‚Ä¢ /level - —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
        ‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        ‚Ä¢ /profile - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        ‚Ä¢ /learn - —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
        ‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        
        üí° **–°–æ–≤–µ—Ç—ã**:
        ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        ‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—É–ª –∏ —Å—Ö–µ–º
        
        üîß **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**:
        ‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: —Ñ–æ—Ä–º—É–ª—ã, —Å—Ö–µ–º—ã, –¥–∏–∞–≥—Ä–∞–º–º—ã
        ‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º"""
    
    await message.answer(help_message, parse_mode="Markdown")


async def handle_main_menu_buttons(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤)
    
    Args:
        callback_query: Callback query –æ—Ç –∫–Ω–æ–ø–∫–∏
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = callback_query.message.chat.id
    data = callback_query.data
    
    logger.info(f"–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {data}")
    
    try:
        if data == "change_level":
            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_novice")],
                [InlineKeyboardButton(text="üü° –ë–∞–∑–æ–≤—ã–π", callback_data="level_basic")],
                [InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")]
            ])
            
            await callback_query.message.edit_text(
                "üìä **–°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif data == "show_status":
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
            current_level = UserService.get_user_level(user_id)
            if current_level:
                status_message = f"üìä **–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å**\n\n"
                status_message += f"–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π: {current_level}\n"
                status_message += f"–†–µ–∂–∏–º: –ó–∞–¥–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤\n\n"
                status_message += f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /learn –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è."
            else:
                status_message = "üìä –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ /level –¥–ª—è —Å–º–µ–Ω—ã"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await callback_query.message.edit_text(
                status_message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif data == "show_profile":
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            user = UserService.get_user_by_telegram_id(user_id)
            if not user:
                await callback_query.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            learning_stats = LearningProgressService.get_learning_statistics(user_id)
            
            profile_message = f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            profile_message += f"üìä –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π: {user.current_level or '–ù–µ –≤—ã–±—Ä–∞–Ω'}\n"
            profile_message += f"üìö –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {learning_stats.get('topics_studied', 0)}\n"
            profile_message += f"‚è±Ô∏è –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: {learning_stats.get('total_study_time_minutes', 0)} –º–∏–Ω\n"
            profile_message += f"‚ùì –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {learning_stats.get('total_questions', 0)}\n"
            profile_message += f"üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {learning_stats.get('average_progress', 0)}%\n"
            profile_message += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await callback_query.message.edit_text(
                profile_message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif data == "enter_learn_mode":
            # –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
            await callback_query.message.edit_text(
                "üéì –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è...",
                reply_markup=None
            )
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_learn
            await handle_learn(callback_query.message)
            
        elif data == "switch_to_education":
            # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º education
            await handle_switch_to_education(callback_query)
            
        elif data == "show_help":
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
            help_message = """‚ùì **–ü–æ–º–æ—â—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏**
        
        üöÄ **–†–µ–∂–∏–º –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤** (—Ç–µ–∫—É—â–∏–π):
        ‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º ML, DL, NLP, CV, Math
        ‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, —Å—Ö–µ–º–∞–º–∏, –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
        ‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
        
        üéì **–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è**:
        ‚Ä¢ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å - –ø–æ–ª—É—á–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ + –≤–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –∑–Ω–∞–Ω–∏–π
        ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–æ–±–∞–≤–ª—è—é—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        üìö **–†–µ–∂–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è**:
        ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (ML, DL, NLP, CV, Math)
        ‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç–µ —É—Ä–æ–∫–∏ —Å —Ç–µ—Å—Ç–∞–º–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
        ‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º
        
        üìä **–ö–æ–º–∞–Ω–¥—ã**:
        ‚Ä¢ /start - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤
        ‚Ä¢ /level - —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
        ‚Ä¢ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        ‚Ä¢ /profile - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        ‚Ä¢ /learn - —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
        ‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        
        üí° **–°–æ–≤–µ—Ç—ã**:
        ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –¥–ª—è –ª—É—á—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        ‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—É–ª –∏ —Å—Ö–µ–º"""
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ])
            
            await callback_query.message.edit_text(
                help_message,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
        elif data == "back_to_main":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            current_level = UserService.get_user_level(user_id)
            if current_level:
                keyboard = create_questions_mode_keyboard()
                
                await callback_query.message.edit_text(
                    f"üöÄ **–†–µ–∂–∏–º –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤**\n\n"
                    f"üìä –£—Ä–æ–≤–µ–Ω—å: {current_level}\n\n"
                    f"–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º ML, DL, NLP, CV –∏–ª–∏ Math. "
                    f"–Ø –æ—Ç–≤–µ—á—É —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π!\n\n"
                    f"–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, —Å—Ö–µ–º–∞–º–∏ –∏–ª–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏, "
                    f"–∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_learn_mode_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        callback_query: Callback query –æ—Ç –∫–Ω–æ–ø–∫–∏
    """
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = callback_query.message.chat.id
    data = callback_query.data
    
    logger.info(f"=== handle_learn_mode_selection –≤—ã–∑–≤–∞–Ω–∞ ===")
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    logger.info(f"Callback data: '{data}'")
    logger.info(f"Data starts with learn_: {data.startswith('learn_')}")
    logger.info(f"Data equals back_to_questions: {data == 'back_to_questions'}")
    
    try:
        if data.startswith("learn_topic_"):
            # –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
            topic_category = data.replace("learn_topic_", "")
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è: {topic_category} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"Callback data: {data}")
            
            # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º
            topic_mapping = {
                "ML": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                "DL": "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏", 
                "NLP": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
                "CV": "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ",
                "Math": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã"
            }
            
            logger.info(f"Topic mapping keys: {list(topic_mapping.keys())}")
            logger.info(f"Looking for: '{topic_category}'")
            
            topic_name = topic_mapping.get(topic_category)
            if not topic_name:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞: {topic_category}")
                await callback_query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–µ–º–∞")
                return
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Math - –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            if topic_category == "Math":
                logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ Math –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è Math
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìö –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="edu_direction_Math"),
                        InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω", callback_data="edu_plan_Math")
                    ],
                    [
                        InlineKeyboardButton(text="üöÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_questions")
                    ]
                ])
                
                await callback_query.message.edit_text(
                    "üî¢ **–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã ML**\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
                    "üìö **–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ** - –ø—Ä–æ–π—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è ML\n"
                    "üìã **–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞–Ω** - –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∫—É—Ä—Å–∞\n\n"
                    "–ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç 18 —É—Ä–æ–∫–æ–≤ –ø–æ –ª–∏–Ω–µ–π–Ω–æ–π –∞–ª–≥–µ–±—Ä–µ, –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∏ —Ç–µ–æ—Ä–∏–∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π.",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å LLM
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º—ã
                session = learning_mode_manager.start_learning_session(user_id, topic=topic_name)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ
                question = learning_mode_manager.generate_comprehension_question(user_id)
                
                if question:
                    await callback_query.message.edit_text(
                        f"üìö **–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ: {topic_name}**\n\n"
                        f"ü§î **–í–æ–ø—Ä–æ—Å:**\n{question}\n\n"
                        f"–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –±—É–¥—É –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è!",
                        parse_mode="Markdown"
                    )
                else:
                    await callback_query.message.edit_text(
                        f"üìö **–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ: {topic_name}**\n\n"
                        f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. "
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.",
                        parse_mode="Markdown"
                    )
        
        elif data == "back_to_questions":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤
            current_level = UserService.get_user_level(user_id)
            if current_level:
                keyboard = create_questions_mode_keyboard()
                
                await callback_query.message.edit_text(
                    f"üöÄ **–†–µ–∂–∏–º –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤**\n\n"
                    f"üìä –£—Ä–æ–≤–µ–Ω—å: {current_level}\n\n"
                    f"–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º ML, DL, NLP, CV –∏–ª–∏ Math. "
                    f"–Ø –æ—Ç–≤–µ—á—É —Å —É—á–µ—Ç–æ–º –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π!\n\n"
                    f"–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, —Å—Ö–µ–º–∞–º–∏ –∏–ª–∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏, "
                    f"–∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                await callback_query.message.edit_text(
                    "‚ùå –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –Ω–µ –≤—ã–±—Ä–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è."
                )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback_query.message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_stop_learn(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop_learn
    
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stop_learn –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
        session_stats = learning_mode_manager.end_learning_session(user_id)
        
        if session_stats:
            await message.answer(
                f"üéì –°–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Å—Å–∏–∏:\n"
                f"‚Ä¢ –¢–µ–º–∞: {session_stats['topic']}\n"
                f"‚Ä¢ –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: {session_stats['duration_minutes']} –º–∏–Ω\n"
                f"‚Ä¢ –í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {session_stats['questions_asked']}\n"
                f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {session_stats['correct_answers']}\n"
                f"‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å: {session_stats['accuracy']:.1f}%\n"
                f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: +{session_stats['progress_gained']:.1f}%\n\n"
                f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /learn —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é."
            )
        else:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—É—á–µ–Ω–∏—è.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /learn —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /history
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /history –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
        stats = LearningProgressService.get_learning_statistics(user_id)
        
        if not stats or stats.get('topics_studied', 0) == 0:
            await message.answer(
                "üìö –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –ø—É—Å—Ç–∞\n\n"
                "–ù–∞—á–Ω–∏ –∏–∑—É—á–∞—Ç—å —Ç–µ–º—ã, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç—É! "
                "–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —Ç–µ–º—ã
        recent_topics = LearningProgressService.get_recent_topics(user_id, limit=5)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:\n\n"
        stats_message += f"üìö –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {stats['topics_studied']}\n"
        stats_message += f"‚è±Ô∏è –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: {stats['total_study_time_minutes']} –º–∏–Ω\n"
        stats_message += f"‚ùì –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_questions']}\n"
        stats_message += f"üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {stats['average_progress']}%\n\n"
        
        if recent_topics:
            stats_message += "üïí –ù–µ–¥–∞–≤–Ω–æ –∏–∑—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã:\n"
            for i, topic in enumerate(recent_topics, 1):
                stats_message += f"{i}. {topic}\n"
        
        await message.answer(stats_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_history(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /history
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ–º –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /history –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—É—á–µ–Ω–∏—è
        learning_stats = LearningProgressService.get_learning_statistics(user_id)
        
        if not learning_stats or learning_stats.get('topics_studied', 0) == 0:
            await message.answer(
                "üìö –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è –ø—É—Å—Ç–∞.\n\n"
                "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, "
                "–∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ!"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_message = f"üìö –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è\n\n"
        history_message += f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        history_message += f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ —Ç–µ–º: {learning_stats.get('topics_studied', 0)}\n"
        history_message += f"‚Ä¢ –í—Ä–µ–º—è –∏–∑—É—á–µ–Ω–∏—è: {learning_stats.get('total_study_time_minutes', 0)} –º–∏–Ω\n"
        history_message += f"‚Ä¢ –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {learning_stats.get('total_questions', 0)}\n"
        history_message += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {learning_stats.get('average_progress', 0)}%\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–∞–º
        user_progress = LearningProgressService.get_user_progress(user_id)
        
        if user_progress:
            history_message += f"üìñ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–∞–º:\n"
            for progress in user_progress[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ç–µ–º
                topic_name = progress['topic_name']
                progress_pct = progress['progress_percentage']
                last_studied = progress['last_studied_at']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É
                if progress_pct >= 80:
                    emoji = "üåü"
                elif progress_pct >= 60:
                    emoji = "‚úÖ"
                elif progress_pct >= 40:
                    emoji = "üîÑ"
                else:
                    emoji = "üìö"
                
                history_message += f"{emoji} {topic_name}: {progress_pct:.1f}%\n"
            
            if len(user_progress) > 10:
                history_message += f"... –∏ –µ—â–µ {len(user_progress) - 10} —Ç–µ–º\n"
        
        history_message += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /learn —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ!"
        
        await message.answer(history_message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    
    –§—É–Ω–∫—Ü–∏—è:
    1. –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç
    3. –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    4. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ LLM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
    6. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –º–µ–¥–∏–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
    has_photo = (
        (hasattr(message, 'photo') and message.photo) or
        (hasattr(message, 'document') and message.document and message.document.mime_type and message.document.mime_type.startswith('image/')) or
        (hasattr(message, 'animation') and message.animation) or
        (hasattr(message, 'video') and message.video)
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    if hasattr(message, 'document') and message.document and message.document.mime_type:
        if message.document.mime_type.startswith('image/'):
            has_photo = True
    
    if has_photo:
        logger.info(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –ø–æ–ø–∞–ª–æ –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫!")
        logger.info(f"üì∑ –ï—Å—Ç—å photo: {hasattr(message, 'photo') and message.photo}")
        logger.info(f"üìÑ –ï—Å—Ç—å document: {hasattr(message, 'document') and message.document}")
        if hasattr(message, 'photo') and message.photo:
            logger.info(f"üì∑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(message.photo)}")
            logger.info(f"üì∑ –†–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ: {[f'{p.width}x{p.height}' for p in message.photo]}")
        # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞ –≤ –æ–±—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        return
    
    logger.info(f"üìù –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –í–´–ó–í–ê–ù! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Ç–µ–∫—Å—Ç: '{text}'")
    logger.info(f"üîç –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message).__name__}")
    logger.info(f"üì∑ –ï—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ: {hasattr(message, 'photo') and message.photo is not None}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_level = UserService.get_user_level(user_id)
    if current_level is None:
        # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ë–∞–∑–æ–≤—ã–π" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        UserService.update_user_level(user_id, "–ë–∞–∑–æ–≤—ã–π")
        await message.answer("‚úÖ –í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: –ë–∞–∑–æ–≤—ã–π")
        logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å '–ë–∞–∑–æ–≤—ã–π' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —É—Ä–æ–∫—É
    if text.lower().strip() == "—Ç–µ—Å—Ç":
        await handle_lesson_test_start(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    if await handle_lesson_test_answer(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É "–¥–∞–ª—å—à–µ" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É
    if text.lower().strip() in ["–¥–∞–ª—å—à–µ", "–¥–∞–ª–µ–µ", "—Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫"]:
        await handle_next_lesson(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É "–¥–∞" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if text.lower().strip() in ["–¥–∞", "yes", "–ø–æ–≤—Ç–æ—Ä–∏—Ç—å", "–∑–∞–Ω–æ–≤–æ"]:
        await handle_retry_test(message)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
    active_session = learning_mode_manager.get_active_session(user_id)
    if active_session:
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º "–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
        if active_session.topic == "–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
            # –õ–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            pass
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if active_session.questions_asked > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                if len(text) < 100 and any(word in text.lower() for word in ['–¥–∞', '–Ω–µ—Ç', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '–≤–µ—Ä–Ω–æ', '–Ω–µ–≤–µ—Ä–Ω–æ']):
                    is_correct, explanation = learning_mode_manager.check_answer(user_id, text)
                    await message.answer(f"{explanation}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop_learn —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é.")
                    return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ LLM –¥—É–º–∞–µ—Ç
        await message.bot.send_chat_action(chat_id=chat_id, action="typing")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç
        thinking_msg = await message.answer(random.choice(THINKING_MESSAGES))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_user_message(chat_id, text)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        dialog_history = get_dialog_history(chat_id)
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
        from bot.dialog import extract_user_level
        user_level = extract_user_level(chat_id)
        if not user_level:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ —É–¥–∞–ª—è–µ–º)
            level_notification = "üìä –£—Ä–æ–≤–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è."
            await message.answer(level_notification)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            add_assistant_message(chat_id, level_notification)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            add_user_message(chat_id, "–ë–∞–∑–æ–≤—ã–π")
            user_level = "–ë–∞–∑–æ–≤—ã–π"
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é" –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è)
            try:
                new_text = random.choice(THINKING_MESSAGES)
                if thinking_msg.text != new_text:
                    await thinking_msg.edit_text(new_text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–¥—É–º–∞—é': {e}")
        logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_level}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM...")
        response = await get_llm_response(dialog_history)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç LLM –ø–æ–ª—É—á–µ–Ω: {len(response) if response else 0} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not response or response.strip() == "":
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –¥—Ä—É–≥–æ–π."
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
        cleaned_response = clean_response(response)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—á–∏—â–µ–Ω: {len(response)} -> {len(cleaned_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_assistant_message(chat_id, cleaned_response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å
        try:
            topic_name, confidence = topic_analyzer.extract_topic_from_question(text)
            if confidence > 20:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ 20%
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                topic_info = topic_analyzer.get_topic_info(topic_name)
                if topic_info:
                    UserQuestionService.save_user_question(
                        telegram_id=user_id,
                        question_text=text,
                        topic_name=topic_name,
                        topic_category=topic_info.category,
                        confidence_score=confidence
                    )
                    logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ —Ç–µ–º–µ '{topic_name}'")
                
                LearningProgressService.update_progress(
                    telegram_id=user_id,
                    topic_name=topic_name,
                    progress_delta=3.0,  # +3% –∑–∞ –≤–æ–ø—Ä–æ—Å
                    study_duration_minutes=2,  # –ü—Ä–∏–º–µ—Ä–Ω–æ 2 –º–∏–Ω—É—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å
                    questions_asked=1
                )
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç–µ–º–µ '{topic_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
                active_session = learning_mode_manager.get_active_session(user_id)
                if active_session:
                    if active_session.topic == "–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
                        # –í —Ä–µ–∂–∏–º–µ "–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
                        question = learning_mode_manager.generate_comprehension_question(user_id)
                        if question:
                            await message.answer(f"ü§î **–í–æ–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è:**\n\n{question}\n\n–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ü–µ–Ω—é –≤–∞—à–∏ –∑–Ω–∞–Ω–∏—è!", parse_mode="Markdown")
                            logger.info(f"–°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–º–µ '{topic_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        # –í —Ä–µ–∂–∏–º–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
                        question = learning_mode_manager.generate_comprehension_question(user_id)
                        if question:
                            await message.answer(f"ü§î –í–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ:\n\n{question}")
                            logger.info(f"–°–æ–∑–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ '{topic_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–º–æ–¥–µ–ª—å –¥—É–º–∞–µ—Ç"
        await thinking_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(cleaned_response)
        
    except ValueError as e:
        # –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        try:
            await thinking_msg.delete()
        except:
            pass
        await message.answer(
            "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
    except Exception as e:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {type(e).__name__}: {e}")
        try:
            await thinking_msg.delete()
        except:
            pass
        await message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–∂–µ."
        )


async def handle_photo(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Vision API
    
    –§—É–Ω–∫—Ü–∏—è:
    1. –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    2. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    3. –°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ Telegram
    4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Vision API
    5. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    6. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Vision API —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    7. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    caption = message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"
    
    logger.info(f"üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö –§–û–¢–û –í–´–ó–í–ê–ù! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —á–∞—Ç {chat_id}, –ø–æ–¥–ø–∏—Å—å: {caption}")
    logger.info(f"üîç –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message).__name__}")
    logger.info(f"üîç –ï—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç: {message.text is not None}")
    logger.info(f"üîç –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message.text}'")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    if message.photo:
        logger.info(f"üì∑ –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(message.photo)}")
        logger.info(f"üì∑ –†–∞–∑–º–µ—Ä—ã —Ñ–æ—Ç–æ: {[f'{p.width}x{p.height}' for p in message.photo]}")
        media_type = "photo"
    elif message.document:
        logger.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {message.document.file_name}")
        logger.info(f"üìÑ MIME —Ç–∏–ø: {message.document.mime_type}")
        media_type = "document"
    else:
        logger.info(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
        media_type = "unknown"
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await message.bot.send_chat_action(chat_id=chat_id, action="typing")
        thinking_msg = await message.answer("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
        if message.photo:
            # –û–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ - –±–µ—Ä–µ–º –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
            photo = message.photo[-1]
            file = await message.bot.get_file(photo.file_id)
        elif message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            file = await message.bot.get_file(message.document.file_id)
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        photo_bytes = await message.bot.download_file(file.file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        image_data = photo_bytes.read()
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if message.document and message.document.mime_type:
            # –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º MIME —Ç–∏–ø
            if 'jpeg' in message.document.mime_type or 'jpg' in message.document.mime_type:
                image_format = "jpeg"
            elif 'png' in message.document.mime_type:
                image_format = "png"
            elif 'gif' in message.document.mime_type:
                image_format = "gif"
            elif 'webp' in message.document.mime_type:
                image_format = "webp"
            else:
                image_format = "jpeg"  # fallback
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–æ—Ç–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤—ã–º –±–∞–π—Ç–∞–º
            if image_data.startswith(b'\xff\xd8\xff'):
                image_format = "jpeg"
            elif image_data.startswith(b'\x89PNG'):
                image_format = "png"
            elif image_data.startswith(b'GIF'):
                image_format = "gif"
            else:
                image_format = "jpeg"  # fallback
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –±–æ–ª–µ–µ 20MB –¥–ª—è Vision API)
        image_size_mb = len(image_data) / (1024 * 1024)
        logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ base64: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–º–µ—Ä: {image_size_mb:.2f} MB, —Ñ–æ—Ä–º–∞—Ç: {image_format}")
        
        if image_size_mb > 20:
            await thinking_msg.delete()
            await message.answer(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–±–æ–ª–µ–µ 20MB). "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∂–º–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å—å—é –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_user_message(chat_id, caption)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = get_dialog_history(chat_id)
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
        from bot.dialog import extract_user_level
        user_level = extract_user_level(chat_id)
        if not user_level:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ —É–¥–∞–ª—è–µ–º)
            level_notification = "üìä –£—Ä–æ–≤–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è."
            await message.answer(level_notification)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            add_assistant_message(chat_id, level_notification)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            add_user_message(chat_id, "–ë–∞–∑–æ–≤—ã–π")
            user_level = "–ë–∞–∑–æ–≤—ã–π"
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥—É–º–∞—é" –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è)
            try:
                if thinking_msg.text != "üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...":
                    await thinking_msg.edit_text("üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–¥—É–º–∞—é': {e}")
        logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_level}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Vision API
        from llm.vision_client import get_vision_response
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Vision API...")
        response = await get_vision_response(dialog_history, image_base64, image_format)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç Vision API –ø–æ–ª—É—á–µ–Ω: {len(response) if response else 0} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
        if not response or response.strip() == "":
            response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å Vision API\n‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG –∏–ª–∏ PNG."
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned_response = clean_response(response)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—á–∏—â–µ–Ω: {len(response)} -> {len(cleaned_response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_assistant_message(chat_id, cleaned_response)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await thinking_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(cleaned_response)
        
    except ValueError as e:
        # –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Vision API: {e}")
        try:
            await thinking_msg.delete()
        except:
            pass
        await message.answer(
            "‚ö†Ô∏è Vision API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        
    except Exception as e:
        # –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {type(e).__name__}: {e}")
        try:
            await thinking_msg.delete()
        except:
            pass
        await message.answer(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."
        )


async def handle_level_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    """
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ callback_data
    level_mapping = {
        "level_novice": "–ù–æ–≤–∏—á–æ–∫",
        "level_basic": "–ë–∞–∑–æ–≤—ã–π", 
        "level_advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    }
    
    level = level_mapping.get(callback_query.data)
    
    if level:
        logger.info(f"–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å {level} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (@{username})")
        
        # –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–≤—ã–π –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è
        is_first = is_first_level_selection(user_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        UserService.update_user_level(user_id, level)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —É—Ä–æ–≤–Ω—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_user_message(chat_id, level)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = get_dialog_history(chat_id)
        
        try:
            if is_first:
                # –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å" + –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                await callback_query.message.edit_text(
                    f"‚úÖ –í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å: {level}",
                    reply_markup=None
                )
                welcome_msg = get_welcome_message(level)
                await callback_query.message.answer(welcome_msg)
                add_assistant_message(chat_id, welcome_msg)
            else:
                # –°–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback_query.message.edit_text(
                    f"üîÑ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{level}'. –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!",
                    reply_markup=None
                )
                add_assistant_message(chat_id, f"üîÑ –£—Ä–æ–≤–µ–Ω—å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{level}'. –ó–∞–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏)
            await callback_query.answer()
                
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            await callback_query.message.answer(
                "‚ö†Ô∏è –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            await callback_query.answer()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è: {type(e).__name__}: {e}")
            await callback_query.message.answer(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await callback_query.answer()
    else:
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å")


async def handle_voice(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π —Ñ–ª–æ—É
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    user_id = message.from_user.id
    username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    chat_id = message.chat.id
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = get_dialog_history(chat_id)
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞: {len(dialog_history)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω
        from bot.dialog import extract_user_level
        user_level = extract_user_level(chat_id)
        if not user_level:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–Ω–µ —É–¥–∞–ª—è–µ–º)
            level_notification = "üìä –£—Ä–æ–≤–µ–Ω—å –Ω–µ –≤—ã–±—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è."
            await message.answer(level_notification)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            add_assistant_message(chat_id, level_notification)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            add_user_message(chat_id, "–ë–∞–∑–æ–≤—ã–π")
            user_level = "–ë–∞–∑–æ–≤—ã–π"
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é" –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            try:
                new_text = "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ..."
                if processing_msg.text != new_text:
                    await processing_msg.edit_text(new_text)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ '–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é': {e}")
        logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_level}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        voice = message.voice
        file_id = voice.file_id
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: file_id={file_id}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram Bot API
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ-–¥–∞–Ω–Ω—ã–µ
        audio_data = await message.bot.download_file(file_path)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (Telegram –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç .ogg –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        file_extension = ".ogg"
        if hasattr(voice, 'mime_type') and voice.mime_type:
            if "mp3" in voice.mime_type:
                file_extension = ".mp3"
            elif "m4a" in voice.mime_type:
                file_extension = ".m4a"
            elif "wav" in voice.mime_type:
                file_extension = ".wav"
        
        logger.info(f"–ê—É–¥–∏–æ-—Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(audio_data.read())} –±–∞–π—Ç, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        audio_data.seek(0)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            new_text = "üé§ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∞—É–¥–∏–æ..."
            if processing_msg.text != new_text:
                await processing_msg.edit_text(new_text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ: {e}")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        try:
            transcribed_text = await transcribe_audio_data(audio_data.read(), file_extension)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            await processing_msg.edit_text("‚ùå –§—É–Ω–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å API –∏–ª–∏ —Å–µ—Ç—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω: {len(transcribed_text) > 0}")
        
        if not transcribed_text.strip():
            await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        try:
            new_text = "üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
            if processing_msg.text != new_text:
                await processing_msg.edit_text(new_text)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        add_user_message(chat_id, transcribed_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = get_dialog_history(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
        response = await get_llm_response(dialog_history)
        
        if not response:
            await processing_msg.edit_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_text = clean_response(response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_assistant_message(chat_id, clean_text)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é"
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(clean_text)
        
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(clean_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        await processing_msg.edit_text("‚ùå –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {type(e).__name__}: {e}")
        await processing_msg.edit_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


async def handle_start_course(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start_course - –Ω–∞—á–∞–ª–æ –∫—É—Ä—Å–∞ Math
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start_course –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫—É—Ä—Å–∞ Math
    course = db.get_course(1)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Math –∫—É—Ä—Å –∏–º–µ–µ—Ç ID = 1
    if not course:
        await message.answer("‚ùå –ö—É—Ä—Å Math –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    db.init_user_progress(user_id, course.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
    await show_lesson(message, course.id, 1)


async def show_lesson(message: Message, course_id: int, lesson_number: int):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    lesson = db.get_lesson(course_id, lesson_number)
    if not lesson:
        await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    course = db.get_course(course_id)
    progress = db.get_user_progress(user_id, course_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if lesson_number > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"lesson_{course_id}_{lesson_number-1}"))
    
    if lesson_number < course.total_lessons:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚Üí", callback_data=f"lesson_{course_id}_{lesson_number+1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_menu"),
        InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç", callback_data=f"test_{lesson.id}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    lesson_text = f"üìò –£—Ä–æ–∫ {lesson_number}/{course.total_lessons}: {lesson.title}\n\n{lesson.content}"
    
    await message.answer(lesson_text, reply_markup=keyboard)


async def handle_lesson_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("lesson_"):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º
        parts = data.split("_")
        course_id = int(parts[1])
        lesson_number = int(parts[2])
        
        await callback_query.message.delete()
        await show_lesson(callback_query.message, course_id, lesson_number)
        await callback_query.answer()
    
    elif data.startswith("test_"):
        # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = int(data.split("_")[1])
        await start_lesson_test(callback_query, lesson_id)
    
    elif data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.message.delete()
        await handle_start(callback_query.message)
        await callback_query.answer()


async def start_lesson_test(callback_query: CallbackQuery, lesson_id: int):
    """
    –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É
    """
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson = None
    for course_id in range(1, 10):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫—É—Ä—Å–æ–≤
        for lesson_num in range(1, 20):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 —É—Ä–æ–∫–æ–≤
            l = db.get_lesson(course_id, lesson_num)
            if l and l.id == lesson_id:
                lesson = l
                break
        if lesson:
            break
    
    if not lesson:
        await callback_query.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    try:
        prompt = TEST_GENERATION_PROMPT.format(
            lesson_title=lesson.title,
            lesson_content=lesson.content
        )
        
        response = await get_llm_response(prompt, user_id)
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        lines = response.strip().split('\n')
        question = ""
        options = []
        correct_answer = ""
        
        parsing_mode = "question"
        for line in lines:
            line = line.strip()
            if line.startswith("–í–æ–ø—Ä–æ—Å:"):
                question = line.replace("–í–æ–ø—Ä–æ—Å:", "").strip()
                parsing_mode = "options"
            elif line.startswith("A)"):
                options.append(line.replace("A)", "").strip())
            elif line.startswith("B)"):
                options.append(line.replace("B)", "").strip())
            elif line.startswith("C)"):
                options.append(line.replace("C)", "").strip())
            elif line.startswith("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"):
                correct_answer = line.replace("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", "").strip()
        
        if not question or len(options) != 3 or not correct_answer:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"A) {options[0]}", callback_data=f"answer_{lesson_id}_A_{correct_answer}"),
                InlineKeyboardButton(text=f"B) {options[1]}", callback_data=f"answer_{lesson_id}_B_{correct_answer}")
            ],
            [
                InlineKeyboardButton(text=f"C) {options[2]}", callback_data=f"answer_{lesson_id}_C_{correct_answer}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"test_{lesson_id}")
            ]
        ])
        
        test_text = f"üß™ –¢–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É: {lesson.title}\n\n{question}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
        
        await callback_query.message.edit_text(test_text, reply_markup=keyboard)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_test_answer(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("answer_"):
        parts = data.split("_")
        lesson_id = int(parts[1])
        user_answer = parts[2]
        correct_answer = parts[3]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = user_answer == correct_answer
        
        if is_correct:
            # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            db.complete_lesson(user_id, lesson_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            lesson = None
            course_id = None
            for cid in range(1, 10):
                for ln in range(1, 20):
                    l = db.get_lesson(cid, ln)
                    if l and l.id == lesson_id:
                        lesson = l
                        course_id = cid
                        break
                if lesson:
                    break
            
            if lesson and course_id:
                progress = db.get_user_progress(user_id, course_id)
                if progress:
                    completed_lessons = progress.completed_lessons + 1
                    db.update_user_progress(user_id, course_id, lesson.lesson_number, completed_lessons)
            
            await callback_query.message.edit_text(
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"lesson_{course_id}_{lesson.lesson_number+1}"),
                        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]
                ])
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            db.add_test_error(user_id, lesson_id, "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", correct_answer, user_answer)
            
            await callback_query.message.edit_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"test_{lesson_id}"),
                        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]
                ])
            )
        
        await callback_query.answer()


async def handle_profile_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile - –ø–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º
    courses_stats = []
    for course_id in range(1, 10):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫—É—Ä—Å–æ–≤
        course = db.get_course(course_id)
        if course:
            stats = db.get_user_course_stats(user_id, course_id)
            if stats['completed_lessons'] > 0 or stats['current_lesson'] > 1:
                courses_stats.append({
                    'name': course.name,
                    'current': stats['current_lesson'],
                    'total': course.total_lessons,
                    'completed': stats['completed_lessons'],
                    'errors': stats['error_count']
                })
    
    if not courses_stats:
        await message.answer("üìä –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–∑—É—á–∞—Ç—å –∫—É—Ä—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_course –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
    
    for stats in courses_stats:
        profile_text += f"üìö {stats['name']}: {stats['completed']}/{stats['total']} —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
        profile_text += f"üìç –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {stats['current']}/{stats['total']}\n"
        profile_text += f"‚ùå –û—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö: {stats['errors']}\n\n"
    
    profile_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /errors –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö."
    
    await message.answer(profile_text)


async def handle_errors_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /errors - –ø–æ–∫–∞–∑ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    errors = db.get_user_test_errors(user_id)
    
    if not errors:
        await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö!")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —É—Ä–æ–∫–∞–º
    errors_by_lesson = {}
    for error in errors:
        if error.lesson_id not in errors_by_lesson:
            errors_by_lesson[error.lesson_id] = []
        errors_by_lesson[error.lesson_id].append(error)
    
    errors_text = "‚ùå –í–∞—à–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö:\n\n"
    
    for lesson_id, lesson_errors in errors_by_lesson.items():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        lesson = None
        for course_id in range(1, 10):
            for lesson_num in range(1, 20):
                l = db.get_lesson(course_id, lesson_num)
                if l and l.id == lesson_id:
                    lesson = l
                    break
            if lesson:
                break
        
        if lesson:
            errors_text += f"üìò {lesson.title}:\n"
            for error in lesson_errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                errors_text += f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {error.question[:50]}...\n"
                errors_text += f"  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {error.correct_answer}\n"
                errors_text += f"  –í–∞—à –æ—Ç–≤–µ—Ç: {error.user_answer}\n\n"
    
    errors_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∑–∞–Ω–æ–≤–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
    
    await message.answer(errors_text)


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    
    –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∂–µ–Ω: –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ 
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥—ã) –¥–æ–ª–∂–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–∞–Ω—å—à–µ –æ–±—â–∏—Ö
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞
    dp.message.register(handle_start, Command("start"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /level - —Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π
    dp.message.register(handle_level, Command("level"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    dp.message.register(handle_status, Command("status"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile - –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    dp.message.register(handle_profile, Command("profile"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /learn - —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    dp.message.register(handle_learn, Command("learn"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mode - —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    dp.message.register(handle_mode, Command("mode"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–º–æ—â—å
    dp.message.register(handle_help, Command("help"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_course - –Ω–∞—á–∞–ª–æ –∫—É—Ä—Å–∞
    dp.message.register(handle_start_course, Command("start_course"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.message.register(handle_profile_command, Command("profile"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /errors - –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
    dp.message.register(handle_errors_command, Command("errors"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã (–≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ)
    dp.callback_query.register(handle_mode_selection, F.data.in_(["mode_questions", "mode_learning"]))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    dp.callback_query.register(handle_level_selection, F.data.startswith("level_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤)
    dp.callback_query.register(handle_main_menu_buttons, F.data.in_([
        "change_level", "show_status", "show_profile", "enter_learn_mode", 
        "show_help", "back_to_main", "switch_to_education"
    ]))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –æ–±—É—á–µ–Ω–∏—è
    dp.callback_query.register(handle_learn_mode_selection, F.data.startswith("learn_"))
    dp.callback_query.register(handle_learn_mode_selection, F.data == "back_to_questions")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º education
    dp.callback_query.register(handle_switch_to_education, F.data == "switch_to_education")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_direction_"))
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_plan_"))
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_start_"))
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_prev_"))
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_next_"))
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_test_"))
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_progress_"))
    dp.callback_query.register(handle_education_direction_selection, F.data.startswith("edu_lesson_"))
    dp.callback_query.register(handle_education_direction_selection, F.data == "edu_back")
    dp.callback_query.register(handle_education_direction_selection, F.data == "back_to_questions")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    dp.callback_query.register(handle_test_answer, F.data.startswith("test_answer_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("lesson_"))
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("test_"))
    dp.callback_query.register(handle_lesson_callback, F.data == "back_to_menu")
    dp.callback_query.register(handle_test_answer, F.data.startswith("answer_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
    dp.message.register(handle_voice, F.voice)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    dp.message.register(handle_photo, F.photo)
    dp.message.register(handle_photo, F.document.has(F.mime_type.startswith('image/')))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    dp.message.register(handle_message)
