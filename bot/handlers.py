"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞ ML Tutor

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback queries.
"""

import logging
from string import Template
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from bot.dialog import clear_dialog, add_user_message, add_assistant_message, get_dialog_history, extract_user_level, get_user_level_or_default
from bot.prompts import get_system_prompt, get_welcome_message
from bot.progress import get_user_progress, mark_topic_completed
from llm.client import get_llm_response, get_llm_response_for_test
from bot.database import Database
from bot.test_prompts import TEST_GENERATION_PROMPT

logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
class LearningProgressTracker:
    def __init__(self):
        pass
    
    def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        progress = get_user_progress(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        test_errors = db.get_user_test_errors(user_id)
        successful_tests = max(0, len(progress) - len(test_errors))  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        return {
            'topics_studied': len(progress),
            'learning_time': '0 –º–∏–Ω',  # –ó–∞–≥–ª—É—à–∫–∞
            'successful_tests': successful_tests,
            'test_errors': len(test_errors)
        }
    
    def update_progress(self, user_id: int, question: str, response: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–º–µ—á–∞–µ–º —Ç–µ–º—É –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—É—é
        if any(keyword in question.lower() for keyword in ['–≤–µ–∫—Ç–æ—Ä', '–º–∞—Ç—Ä–∏—Ü–∞', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω']):
            mark_topic_completed(user_id, 'math_vectors_operations')
        elif any(keyword in question.lower() for keyword in ['–º–∞—Ç—Ä–∏—Ü', '—É–º–Ω–æ–∂–µ–Ω', '—Ç—Ä–∞–Ω—Å–ø–æ–Ω']):
            mark_topic_completed(user_id, 'math_matrices_operations')
        elif any(keyword in question.lower() for keyword in ['—Å–æ–±—Å—Ç–≤–µ–Ω–Ω', 'eigen', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç']):
            mark_topic_completed(user_id, 'math_eigenvalues_vectors')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_tracker = LearningProgressTracker()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


async def handle_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞)
    clear_dialog(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""–ü—Ä–∏–≤–µ—Ç!üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å–Ω–æ–≤–∞—Ö –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!

üéì **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —Å 18 —É—Ä–æ–∫–∞–º–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è ML
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏, —Å—Ö–µ–º–∞–º–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ–¥ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π

üìö **–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫—É—Ä—Å–∞:**
‚Ä¢ –õ–∏–Ω–µ–π–Ω–∞—è –∞–ª–≥–µ–±—Ä–∞ (–≤–µ–∫—Ç–æ—Ä—ã, –º–∞—Ç—Ä–∏—Ü—ã, —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ, –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –±–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Ç–µ–æ—Ä–µ–º–∞)

üöÄ **–ö–∞–∫ –Ω–∞—á–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –Ω–∏–∂–µ
2. –ù–∞–∂–º–∏ "üìñ –ö—É—Ä—Å—ã" –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
3. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—Å—Ç–æ–º, –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏!

üìä –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner"),
            InlineKeyboardButton(text="üü° –ë–∞–∑–æ–≤—ã–π", callback_data="level_intermediate")
        ],
        [
            InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")
        ],
        [
            InlineKeyboardButton(text="üìñ –ö—É—Ä—Å—ã", callback_data="show_courses")
        ]
    ])
    
    await message.answer(welcome_text, reply_markup=keyboard)


async def handle_learn(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /learn - –≤—ã–±–æ—Ä –∫—É—Ä—Å–æ–≤
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /learn –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
    courses = []
    for course_id in range(1, 10):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫—É—Ä—Å–æ–≤
        course = db.get_course(course_id)
        if course:
            courses.append(course)
    
    if not courses:
        await message.answer("‚ùå –ö—É—Ä—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
    keyboard_buttons = []
    for course in courses:
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"üìö {course.name}", callback_data=f"course_{course.id}")
        ])
    
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    courses_text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
    for i, course in enumerate(courses, 1):
        courses_text += f"üß† {course.name}\n"
        courses_text += f"   ‚îî‚îÄ {course.description}\n"
        courses_text += f"   ‚îî‚îÄ –£—Ä–æ–∫–æ–≤: {course.total_lessons}\n\n"
    
    courses_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    
    await message.answer(courses_text, reply_markup=keyboard, parse_mode="Markdown")


async def handle_level(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /level - —Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /level –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    level_text = """üìä –í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data="level_beginner"),
            InlineKeyboardButton(text="üü° –ë–∞–∑–æ–≤—ã–π", callback_data="level_intermediate")
        ],
        [
            InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")
        ]
    ])
    
    await message.answer(level_text, reply_markup=keyboard)


async def handle_status(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞
    dialog_history = get_dialog_history(chat_id)
    current_level = get_user_level_or_default(chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_stats = progress_tracker.get_user_stats(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö
    courses = db.get_all_courses()
    courses_info = []
    
    for course in courses:
        progress = db.get_user_progress(user_id, course.id)
        if progress:
            completed = progress.completed_lessons
            total = course.total_lessons
            percentage = int((completed / total) * 100) if total > 0 else 0
            courses_info.append(f"üß† {course.name} ‚îî‚îÄ –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total} ({percentage}%)")
        else:
            courses_info.append(f"üß† {course.name} ‚îî‚îÄ –ü—Ä–æ–≥—Ä–µ—Å—Å: 0/{course.total_lessons} (0%)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    original_level = extract_user_level(chat_id)
    level_note = ""
    if original_level is None:
        level_note = " (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)"
    
    status_text = f"üìä **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:**\n\n"
    level_emoji = "üü¢" if current_level == "–ù–æ–≤–∏—á–æ–∫" else "üü°" if current_level == "–ë–∞–∑–æ–≤—ã–π" else "üî¥"
    status_text += f"üéØ **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** {current_level} {level_emoji}\n"
    status_text += f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è.\n\n"
    
    if courses_info:
        status_text += f"üìö **–ö—É—Ä—Å—ã:**\n"
        for course_info in courses_info:
            status_text += f"{course_info}\n"
        status_text += "\n"
    
    status_text += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    status_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {progress_stats.get('successful_tests', 0)}\n"
    status_text += f"‚Ä¢ –û—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö: {progress_stats.get('test_errors', 0)}\n"
    status_text += f"‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {progress_stats.get('learning_time', '0 –º–∏–Ω')}\n"
    
    await message.answer(status_text, parse_mode="Markdown")


async def handle_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    help_text = """
ü§ñ **ML Tutor Bot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/learn` - –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
‚Ä¢ `/level` - –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
‚Ä¢ `/status` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ–π `/level`
2. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é
3. –ò–∑—É—á–∞–π—Ç–µ –∫—É—Ä—Å—ã –∫–æ–º–∞–Ω–¥–æ–π `/learn`
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —Å —Ç–µ—Å—Ç–∞–º–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–º—ã:**
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è ML
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python
‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üöÄ
"""
    
    await message.answer(help_text, parse_mode="Markdown")


async def handle_unknown_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    command = message.text.split()[0] if message.text else ""
    
    logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    unknown_text = f"""‚ùå –ö–æ–º–∞–Ω–¥–∞ `{command}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/learn` - –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
‚Ä¢ `/level` - –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
‚Ä¢ `/status` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é!"""
    
    await message.answer(unknown_text, parse_mode="Markdown")


async def handle_course_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –∫—É—Ä—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("course_"):
        course_id = int(data.split("_")[1])
        course = db.get_course(course_id)
        
        if not course:
            await callback_query.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress = db.get_user_progress(user_id, course_id)
        if not progress:
            db.init_user_progress(user_id, course_id)
            progress = db.get_user_progress(user_id, course_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω –∫—É—Ä—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        plan_text = f"üß† **–ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–°–ù–û–í–´ ML**\n\n"
        plan_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.completed_lessons}/{course.total_lessons} —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
        plan_text += f"üìç –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {progress.current_lesson}/{course.total_lessons}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
        plan_text += "üìã –ü–ª–∞–Ω –∫—É—Ä—Å–∞:\n"
        
        # –õ–ò–ù–ï–ô–ù–ê–Ø –ê–õ–ì–ï–ë–†–ê
        plan_text += "‚ñ≤ –õ–ò–ù–ï–ô–ù–ê–Ø –ê–õ–ì–ï–ë–†–ê\n"
        linear_algebra_lessons = [
            "–í–µ–∫—Ç–æ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "–ú–∞—Ç—Ä–∏—Ü—ã –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", 
            "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤–µ–∫—Ç–æ—Ä—ã",
            "–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø—Ä–æ–µ–∫—Ü–∏–∏",
            "SVD –∏ PCA"
        ]
        
        for i, lesson_title in enumerate(linear_algebra_lessons, 1):
            lesson = db.get_lesson(course_id, i)
            if lesson:
                is_completed = progress.completed_lessons >= i
                status = "‚úÖ" if is_completed else ""
                plan_text += f"{status} {i}. {lesson_title}\n"
            else:
                plan_text += f"{i}. {lesson_title}\n"
        
        plan_text += "\n‚ñ≤ –ú–ê–¢–ê–ù –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø\n"
        math_optimization_lessons = [
            "–ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –∏ —á–∞—Å—Ç–Ω—ã–µ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ",
            "–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ —Ü–µ–ø–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ",
            "–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤ –º–∞—Ç—Ä–∏—á–Ω–æ–π —Ñ–æ—Ä–º–µ", 
            "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ (GD, SGD)",
            "Adam –∏ –¥—Ä—É–≥–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã",
            "–í—ã–ø—É–∫–ª—ã–µ –∏ –Ω–µ–≤—ã–ø—É–∫–ª—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
            "–§—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å (MSE, Cross-Entropy)",
            "–†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è (L1, L2)"
        ]
        
        for i, lesson_title in enumerate(math_optimization_lessons, 6):
            lesson = db.get_lesson(course_id, i)
            if lesson:
                is_completed = progress.completed_lessons >= i
                status = "‚úÖ" if is_completed else ""
                plan_text += f"{status} {i}. {lesson_title}\n"
            else:
                plan_text += f"{i}. {lesson_title}\n"
        
        plan_text += "\n‚ñ≤ –í–ï–†–û–Ø–¢–ù–û–°–¢–¨ –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n"
        probability_stats_lessons = [
            "–°–ª—É—á–∞–π–Ω—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è",
            "–ú–∞—Ç–æ–∂–∏–¥–∞–Ω–∏–µ, –¥–∏—Å–ø–µ—Ä—Å–∏—è, –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—è",
            "–ë–∞–π–µ—Å–æ–≤—Å–∫–∞—è —Ç–µ–æ—Ä–µ–º–∞",
            "Maximum Likelihood Estimation (MLE)",
            "–≠–Ω—Ç—Ä–æ–ø–∏—è –∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏"
        ]
        
        for i, lesson_title in enumerate(probability_stats_lessons, 14):
            lesson = db.get_lesson(course_id, i)
            if lesson:
                is_completed = progress.completed_lessons >= i
                status = "‚úÖ" if is_completed else ""
                plan_text += f"{status} {i}. {lesson_title}\n"
            else:
                plan_text += f"{i}. {lesson_title}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        
        if progress.current_lesson <= course.total_lessons:
            keyboard_buttons.append([
                InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"start_learning_{course_id}")
            ])
        
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤", callback_data="back_to_courses")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback_query.message.edit_text(plan_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback_query.answer()
    
    elif data == "back_to_courses":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤
        await callback_query.message.delete()
        await handle_learn(callback_query.message)
        await callback_query.answer()
    
    elif data == "back_to_main":
        await callback_query.message.delete()
        await handle_start(callback_query.message)
        await callback_query.answer()


async def handle_level_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    data = callback_query.data
    
    # –ú–∞–ø–ø–∏–Ω–≥ callback_data –Ω–∞ —É—Ä–æ–≤–Ω–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ –∏ –≤ extract_user_level)
    level_map = {
        "level_beginner": "–ù–æ–≤–∏—á–æ–∫",
        "level_intermediate": "–ë–∞–∑–æ–≤—ã–π", 
        "level_advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    }
    
    if data in level_map:
        level = level_map[data]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        add_user_message(chat_id, level)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ë–î)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —É—Ä–æ–≤–µ–Ω—å –Ω–∞: {level}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        welcome_message = get_welcome_message(level)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        level_emoji = "üü¢" if level == "–ù–æ–≤–∏—á–æ–∫" else "üü°" if level == "–ë–∞–∑–æ–≤—ã–π" else "üî¥"
        await callback_query.message.edit_text(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level} {level_emoji}\n\n"
            f"{welcome_message}\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã!\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è.",
            parse_mode="Markdown"
        )
        await callback_query.answer()
    
    elif data == "show_courses":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤
        await handle_learn(callback_query.message)
        await callback_query.answer()
        

async def handle_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text[:50]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    current_level = extract_user_level(chat_id)
    if current_level is None:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        default_level = get_user_level_or_default(chat_id)
        await message.answer(
            f"üü° –£—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: **{default_level}**\n\n"
            f"–Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è.\n\n",
            parse_mode="Markdown"
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_user_message(chat_id, text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    processing_msg = await message.answer("ü§ñ –§–æ—Ä–º—É–ª–∏—Ä—É—é –ø–æ–Ω—è—Ç–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    dialog_history = get_dialog_history(chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
    try:
        response = await get_llm_response(dialog_history)
        
        if response:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_assistant_message(chat_id, response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∑–∞–º–µ–Ω—è—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await processing_msg.edit_text(response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_tracker.update_progress(user_id, text, response)
        else:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def show_lesson(message: Message, course_id: int, lesson_number: int):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    lesson = db.get_lesson(course_id, lesson_number)
    if not lesson:
        await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    course = db.get_course(course_id)
    progress = db.get_user_progress(user_id, course_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if lesson_number > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"lesson_{course_id}_{lesson_number-1}"))
    
    if lesson_number < course.total_lessons:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚Üí", callback_data=f"lesson_{course_id}_{lesson_number+1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å—É", callback_data=f"back_to_course_{course.id}"),
        InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç", callback_data=f"test_{lesson.id}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    lesson_text = f"üìò –£—Ä–æ–∫ {lesson_number}/{course.total_lessons}: {lesson.title}\n\n{lesson.content}"
    
    await message.answer(lesson_text, reply_markup=keyboard)


async def handle_lesson_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º –∏ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("start_learning_"):
        # –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
        course_id = int(data.split("_")[2])
        progress = db.get_user_progress(user_id, course_id)
        if progress:
            await callback_query.message.delete()
            await show_lesson(callback_query.message, course_id, progress.current_lesson)
        await callback_query.answer()
    
    elif data.startswith("lesson_"):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º
        parts = data.split("_")
        course_id = int(parts[1])
        lesson_number = int(parts[2])
        
        await callback_query.message.delete()
        await show_lesson(callback_query.message, course_id, lesson_number)
        await callback_query.answer()
    
    elif data.startswith("test_"):
        # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = int(data.split("_")[1])
        await start_lesson_test(callback_query, lesson_id)
    
    elif data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.message.delete()
        await handle_start(callback_query.message)
        await callback_query.answer()
    
    elif data.startswith("back_to_course_"):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–ª–∞–Ω—É –∫—É—Ä—Å–∞
        course_id = int(data.split("_")[-1])
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π callback query —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        from aiogram.types import CallbackQuery
        new_callback = CallbackQuery(
            id=callback_query.id,
            from_user=callback_query.from_user,
            message=callback_query.message,
            data=f"course_{course_id}",
            chat_instance=callback_query.chat_instance
        )
        await handle_course_selection(new_callback)


async def start_lesson_test(callback_query: CallbackQuery, lesson_id: int):
    """
    –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É
    """
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson = None
    for course_id in range(1, 10):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫—É—Ä—Å–æ–≤
        for lesson_num in range(1, 20):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 —É—Ä–æ–∫–æ–≤
            l = db.get_lesson(course_id, lesson_num)
            if l and l.id == lesson_id:
                lesson = l
                break
        if lesson:
                break
        
    if not lesson:
        await callback_query.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞
    generating_msg = await callback_query.message.edit_text("üß™ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –¥–ª—è —É—Ä–æ–∫–∞: {lesson.title}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–µ–π
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            import random
            random_hint = random.choice([
                "–°–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏",
                "–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ", 
                "–°–¥–µ–ª–∞–π –≤–æ–ø—Ä–æ—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º",
                "–ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5"
            ])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Template –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            template = Template(TEST_GENERATION_PROMPT)
            prompt = template.safe_substitute(
                lesson_title=lesson.title,
                lesson_content=lesson.content
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü –ø—Ä–æ–º–ø—Ç–∞
            prompt += f"\n\n–í–ê–ñ–ù–û: {random_hint}. –°–æ–∑–¥–∞–π –£–ù–ò–ö–ê–õ–¨–ù–´–ô –≤–æ–ø—Ä–æ—Å, –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö."
            
        except Exception as format_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {format_error}")
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        logger.info(f"–ü—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
        response = await get_llm_response_for_test(prompt)
        
        logger.info(f"–û—Ç–≤–µ—Ç LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {response[:300]}...")
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–¥–µ–ª–∏
        clean_response = response.strip()
        if clean_response.startswith('<s>'):
            clean_response = clean_response[3:].strip()
        if clean_response.endswith('</s>'):
            clean_response = clean_response[:-4].strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if len(clean_response) < 10 or clean_response in ['<s>', '</s>', '<s></s>']:
            logger.warning(f"LLM –≤–µ—Ä–Ω—É–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: '{clean_response}'")
            try:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            except Exception:
                await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç LLM: {clean_response[:200]}...")
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        lines = clean_response.split('\n')
        question = ""
        options = []
        correct_answer = ""
        
        for line in lines:
            line = line.strip()
            if line.startswith("–í–æ–ø—Ä–æ—Å:"):
                question = line.replace("–í–æ–ø—Ä–æ—Å:", "").strip()
            elif line.startswith("A)"):
                options.append(line.replace("A)", "").strip())
            elif line.startswith("B)"):
                options.append(line.replace("B)", "").strip())
            elif line.startswith("C)"):
                options.append(line.replace("C)", "").strip())
            elif line.startswith("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"):
                correct_answer = line.replace("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", "").strip()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not question or len(options) != 3 or not correct_answer:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç LLM: {clean_response[:200]}...")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for line in lines:
                line = line.strip()
                if not question and ("?" in line or "—Ä–∞–≤–µ–Ω" in line or "—Ä–∞–≤–Ω–∞" in line):
                    question = line
                elif line.startswith("A)") or line.startswith("A."):
                    if len(options) < 3:  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                        options.append(line[2:].strip())
                elif line.startswith("B)") or line.startswith("B."):
                    if len(options) < 3:
                        options.append(line[2:].strip())
                elif line.startswith("C)") or line.startswith("C."):
                    if len(options) < 3:
                        options.append(line[2:].strip())
                elif "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π" in line.lower() and ("A" in line or "B" in line or "C" in line):
                    # –ò—â–µ–º –±—É–∫–≤—É –≤ —Å—Ç—Ä–æ–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º
                    for char in ['A', 'B', 'C']:
                        if char in line:
                            correct_answer = char
                            break
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ
        if not correct_answer:
            for line in reversed(lines):
                line = line.strip()
                if any(char in line for char in ['A', 'B', 'C']):
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É A, B –∏–ª–∏ C –≤ —Å—Ç—Ä–æ–∫–µ
                    for char in ['C', 'B', 'A']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                        if char in line:
                            correct_answer = char
                            break
                    if correct_answer:
                        break
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if correct_answer in ['A', 'B', 'C']:
            correct_answer = correct_answer
        elif correct_answer.startswith('A)'):
            correct_answer = 'A'
        elif correct_answer.startswith('B)'):
            correct_answer = 'B'
        elif correct_answer.startswith('C)'):
            correct_answer = 'C'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        if _is_mathematical_question(question):
            if not _validate_mathematical_answer(question, options, correct_answer):
                logger.warning(f"–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π")
                # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –±–æ–ª—å—à–µ —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    import random
                    retry_hints = [
                        "–ò—Å–ø–æ–ª—å–∑—É–π –î–†–£–ì–ò–ï —á–∏—Å–ª–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ",
                        "–°–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å —Å —á–∏—Å–ª–∞–º–∏ 2, 3, 4",
                        "–ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ 1, 2, 3 –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è",
                        "–°–¥–µ–ª–∞–π –≤–æ–ø—Ä–æ—Å —Å —á–∏—Å–ª–∞–º–∏ 3, 4, 5"
                    ]
                    retry_hint = random.choice(retry_hints)
                    
                    retry_template = Template(TEST_GENERATION_PROMPT)
                    retry_prompt = retry_template.safe_substitute(
                        lesson_title=lesson.title,
                        lesson_content=lesson.content
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    retry_prompt += f"\n\n–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: {retry_hint}. –≠—Ç–æ –ü–û–í–¢–û–†–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - —Å–æ–∑–¥–∞–π –°–û–í–°–ï–ú –î–†–£–ì–û–ô –≤–æ–ø—Ä–æ—Å!"
                    
                    response = await get_llm_response_for_test(retry_prompt)
                except Exception as retry_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {retry_error}")
                    try:
                        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    except Exception:
                        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                
                clean_response = response.strip()
                if clean_response.startswith('<s>'):
                    clean_response = clean_response[3:].strip()
                if clean_response.startswith('</s>'):
                    clean_response = clean_response[:-4].strip()
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–∞—Ä—Å–∏–º
                lines = clean_response.split('\n')
                question = ""
                options = []
                correct_answer = ""
                
                for line in lines:
                    line = line.strip()
                    if line.startswith("–í–æ–ø—Ä–æ—Å:"):
                        question = line.replace("–í–æ–ø—Ä–æ—Å:", "").strip()
                    elif line.startswith("A)"):
                        options.append(line.replace("A)", "").strip())
                    elif line.startswith("B)"):
                        options.append(line.replace("B)", "").strip())
                    elif line.startswith("C)"):
                        options.append(line.replace("C)", "").strip())
                    elif line.startswith("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"):
                        correct_answer = line.replace("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", "").strip()
                
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—â–µ —Ä–∞–∑
                if correct_answer in ['A', 'B', 'C']:
                    correct_answer = correct_answer
                elif correct_answer.startswith('A)'):
                    correct_answer = 'A'
                elif correct_answer.startswith('B)'):
                    correct_answer = 'B'
                elif correct_answer.startswith('C)'):
                    correct_answer = 'C'
        
        if not question or len(options) != 3 or not correct_answer:
            logger.warning(f"LLM –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–µ—Å—Ç, —Å–æ–∑–¥–∞–µ–º fallback –≤–æ–ø—Ä–æ—Å")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã —É—Ä–æ–∫–∞
            if "–≤–µ–∫—Ç–æ—Ä" in lesson.title.lower():
                question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–µ–∫—Ç–æ—Ä –≤ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ?"
                options = ["–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫", "–ß–∏—Å–ª–æ", "–¢–æ—á–∫–∞"]
                correct_answer = "A"
            elif "–º–∞—Ç—Ä–∏—Ü–∞" in lesson.title.lower():
                question = "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—Ç—Ä–∏—Ü–∞?"
                options = ["–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —á–∏—Å–µ–ª", "–í–µ–∫—Ç–æ—Ä", "–§—É–Ω–∫—Ü–∏—è"]
                correct_answer = "A"
            elif "—Å–æ–±—Å—Ç–≤–µ–Ω–Ω" in lesson.title.lower():
                question = "–ß—Ç–æ —Ç–∞–∫–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã?"
                options = ["–ß–∏—Å–ª–æ Œª —Ç–∞–∫–æ–µ, —á—Ç–æ Av = Œªv", "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å", "–°–ª–µ–¥"]
                correct_answer = "A"
            else:
                question = "–ß—Ç–æ –∏–∑—É—á–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º —É—Ä–æ–∫–µ?"
                options = ["–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏", "–ò—Å—Ç–æ—Ä–∏—è", "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"]
                correct_answer = "A"
            
            logger.info(f"–°–æ–∑–¥–∞–Ω fallback –≤–æ–ø—Ä–æ—Å: {question}")
        
        if not question or len(options) != 3 or not correct_answer:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –¥–∞–∂–µ —Å fallback. –í–æ–ø—Ä–æ—Å: '{question}', –í–∞—Ä–∏–∞–Ω—Ç—ã: {options}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: '{correct_answer}'")
            logger.error(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç LLM: {clean_response}")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"A) {options[0]}", callback_data=f"answer_{lesson_id}_A_{correct_answer}"),
                InlineKeyboardButton(text=f"B) {options[1]}", callback_data=f"answer_{lesson_id}_B_{correct_answer}")
            ],
            [
                InlineKeyboardButton(text=f"C) {options[2]}", callback_data=f"answer_{lesson_id}_C_{correct_answer}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"test_{lesson_id}")
            ]
        ])
        
        test_text = f"üß™ –¢–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É: {lesson.title}\n\n{question}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
        
        await callback_query.message.edit_text(test_text, reply_markup=keyboard)
        try:
            await callback_query.answer()
        except Exception:
            # Callback query –∏—Å—Ç–µ–∫, –Ω–æ —Ç–µ—Å—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            pass
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        try:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        except Exception:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_test_answer(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("answer_"):
        parts = data.split("_")
        lesson_id = int(parts[1])
        user_answer = parts[2]
        correct_answer = parts[3]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = user_answer == correct_answer
        
        if is_correct:
            # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            db.complete_lesson(user_id, lesson_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            lesson = None
            course_id = None
            for cid in range(1, 10):
                for ln in range(1, 20):
                    l = db.get_lesson(cid, ln)
                    if l and l.id == lesson_id:
                        lesson = l
                        course_id = cid
                        break
                if lesson:
                    break
            
            if lesson and course_id:
                progress = db.get_user_progress(user_id, course_id)
                if progress:
                    completed_lessons = progress.completed_lessons + 1
                    db.update_user_progress(user_id, course_id, lesson.lesson_number, completed_lessons)
            
            await callback_query.message.edit_text(
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç. –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"lesson_{course_id}_{lesson.lesson_number+1}")
                    ],
                    [
                        InlineKeyboardButton(text="üìö –ú–µ–Ω—é –∫—É—Ä—Å–∞", callback_data=f"back_to_course_{course_id}")
                    ]
                ])
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            db.add_test_error(user_id, lesson_id, "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", correct_answer, user_answer)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É"
            lesson = None
            course_id = None
            for cid in range(1, 10):
                for ln in range(1, 20):
                    l = db.get_lesson(cid, ln)
                    if l and l.id == lesson_id:
                        lesson = l
                        course_id = cid
                        break
                if lesson:
                    break
            
            await callback_query.message.edit_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                "–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —É—Ä–æ–∫—É, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üìñ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫—É", callback_data=f"lesson_{course_id}_{lesson.lesson_number}"),
                        InlineKeyboardButton(text="üìö –ú–µ–Ω—é –∫—É—Ä—Å–∞", callback_data=f"back_to_course_{course_id}")
                    ]
                ])
            )
        
        await callback_query.answer()
        

async def handle_photo(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Vision API
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    current_level = extract_user_level(chat_id)
    if current_level is None:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        default_level = get_user_level_or_default(chat_id)
        await message.answer(
            f"üü° –£—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: **{default_level}**\n\n"
            f"–Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è.\n\n",
            parse_mode="Markdown"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        file_id = photo.file_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        bot = message.bot
        file = await bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = await bot.download_file(file.file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        import base64
        image_base64 = base64.b64encode(file_content.read()).decode('utf-8')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_format = "jpeg"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if file.file_path:
            if file.file_path.lower().endswith('.png'):
                image_format = "png"
            elif file.file_path.lower().endswith('.gif'):
                image_format = "gif"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = get_dialog_history(chat_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        caption = message.caption or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        add_user_message(chat_id, f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï] {caption}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        dialog_history = get_dialog_history(chat_id)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Vision API –∫–ª–∏–µ–Ω—Ç
        from llm.vision_client import get_vision_response
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Vision API
        response = await get_vision_response(dialog_history, image_base64, image_format)
        
        if response:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_assistant_message(chat_id, response)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_msg.edit_text(response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_tracker.update_progress(user_id, caption, response)
        else:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {type(e).__name__}: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
        )


async def handle_voice(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    current_level = extract_user_level(chat_id)
    if current_level is None:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        default_level = get_user_level_or_default(chat_id)
        await message.answer(
            f"üü° –£—Ä–æ–≤–µ–Ω—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: **{default_level}**\n\n"
            f"–Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –±–∞–∑–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è.\n\n",
            parse_mode="Markdown"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Ñ–∞–π–ª–µ
        voice = message.voice
        file_id = voice.file_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        bot = message.bot
        file = await bot.get_file(file_id)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_content = await bot.download_file(file.file_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Speech API –∫–ª–∏–µ–Ω—Ç
        from llm.speech_client import HuggingFaceSpeechClient
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        speech_client = HuggingFaceSpeechClient()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
        if not speech_client.api_token:
            await processing_msg.edit_text(
                "‚ùå –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. "
                "–î–ª—è –∏—Ö —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Hugging Face API —Ç–æ–∫–µ–Ω. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
        text = await speech_client.transcribe_audio_data(file_content.read(), ".ogg")
        
        if text and text.strip():
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            add_user_message(chat_id, text)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            dialog_history = get_dialog_history(chat_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
            response = await get_llm_response(dialog_history)
            
            if response:
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
                add_assistant_message(chat_id, response)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await processing_msg.edit_text(response)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_tracker.update_progress(user_id, text, response)
            else:
                await processing_msg.edit_text(
                    f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:** {text}\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
        else:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {type(e).__name__}: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )


def _is_mathematical_question(question: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º"""
    math_keywords = ['–≤–µ–∫—Ç–æ—Ä', '–º–∞—Ç—Ä–∏—Ü–∞', '—É–º–Ω–æ–∂–µ–Ω–∏–µ', '—Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', '–¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç', '—Ä–∞–≤–µ–Ω', '—Ä–∞–≤–Ω–∞', '—Å—É–º–º–∞', '—Å–ª–æ–∂–µ–Ω–∏–µ', '–≤—ã—á–∏—Ç–∞–Ω–∏–µ', '–¥–µ–ª–µ–Ω–∏–µ']
    return any(keyword in question.lower() for keyword in math_keywords)


def _validate_mathematical_answer(question: str, options: list, correct_answer: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞"""
    try:
        import re
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–∫–∞–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
        if '—Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ' in question.lower():
            vectors = re.findall(r'\[([^\]]+)\]', question)
            if len(vectors) >= 2:
                try:
                    v1 = [int(x.strip()) for x in vectors[0].split(',')]
                    v2 = [int(x.strip()) for x in vectors[1].split(',')]
                    
                    if len(v1) == len(v2):
                        correct_result = sum(a * b for a, b in zip(v1, v2))
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
                        for option in options:
                            if str(correct_result) in option:
                                logger.info(f"–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –≤–µ–∫—Ç–æ—Ä—ã {v1} –∏ {v2}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_result}")
                                return True
                        
                        logger.warning(f"–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {correct_result} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö {options}")
                        return False
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤: {e}")
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–æ–≤
        elif '—Å—É–º–º–∞' in question.lower() and '–≤–µ–∫—Ç–æ—Ä' in question.lower():
            vectors = re.findall(r'\[([^\]]+)\]', question)
            if len(vectors) >= 2:
                try:
                    v1 = [int(x.strip()) for x in vectors[0].split(',')]
                    v2 = [int(x.strip()) for x in vectors[1].split(',')]
                    
                    if len(v1) == len(v2):
                        correct_result = [a + b for a, b in zip(v1, v2)]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
                        for option in options:
                            if str(correct_result) in option:
                                logger.info(f"–°–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤: –≤–µ–∫—Ç–æ—Ä—ã {v1} –∏ {v2}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_result}")
                                return True
                        
                        logger.warning(f"–°–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {correct_result} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö {options}")
                        return False
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è: {e}")
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –≤–µ–∫—Ç–æ—Ä
        elif '–º–∞—Ç—Ä–∏—Ü–∞' in question.lower() and '–≤–µ–∫—Ç–æ—Ä' in question.lower():
            vectors = re.findall(r'\[([^\]]+)\]', question)
            if len(vectors) >= 2:
                try:
                    # –ü–µ—Ä–≤—ã–π –≤–µ–∫—Ç–æ—Ä - –º–∞—Ç—Ä–∏—Ü–∞ (–¥–≤—É–º–µ—Ä–Ω–∞—è)
                    matrix_rows = []
                    vector = []
                    
                    # –ü–∞—Ä—Å–∏–º –º–∞—Ç—Ä–∏—Ü—É
                    for i, vec in enumerate(vectors[:-1]):
                        row = [int(x.strip()) for x in vec.split(',')]
                        matrix_rows.append(row)
                    
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–µ–∫—Ç–æ—Ä - –≤–µ–∫—Ç–æ—Ä
                    vector = [int(x.strip()) for x in vectors[-1].split(',')]
                    
                    if len(matrix_rows) > 0 and len(vector) > 0:
                        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –≤–µ–∫—Ç–æ—Ä
                        result = []
                        for row in matrix_rows:
                            if len(row) == len(vector):
                                dot_product = sum(a * b for a, b in zip(row, vector))
                                result.append(dot_product)
                        
                        if result:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
                            for option in options:
                                if str(result) in option or all(str(x) in option for x in result):
                                    logger.info(f"–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –≤–µ–∫—Ç–æ—Ä: —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result}")
                                    return True
                            
                            logger.warning(f"–£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ –≤–µ–∫—Ç–æ—Ä: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {result} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö {options}")
                            return False
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç—Ä–∏—Ü—ã –∏ –≤–µ–∫—Ç–æ—Ä–∞: {e}")
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞
        elif '–¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç' in question.lower():
            vectors = re.findall(r'\[([^\]]+)\]', question)
            if len(vectors) >= 2:
                try:
                    # –ü–∞—Ä—Å–∏–º –º–∞—Ç—Ä–∏—Ü—É 2x2
                    row1 = [int(x.strip()) for x in vectors[0].split(',')]
                    row2 = [int(x.strip()) for x in vectors[1].split(',')]
                    
                    if len(row1) == 2 and len(row2) == 2:
                        det = row1[0] * row2[1] - row1[1] * row2[0]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
                        for option in options:
                            if str(det) in option:
                                logger.info(f"–î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç: –º–∞—Ç—Ä–∏—Ü–∞ {[row1, row2]}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {det}")
                                return True
                        
                        logger.warning(f"–î–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {det} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö {options}")
                        return False
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞: {e}")
                    return False
        
        return True  # –î–ª—è –Ω–µ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    
    –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∂–µ–Ω: –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ 
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥—ã) –¥–æ–ª–∂–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–∞–Ω—å—à–µ –æ–±—â–∏—Ö
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞
    dp.message.register(handle_start, Command("start"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /level - —Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π
    dp.message.register(handle_level, Command("level"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    dp.message.register(handle_status, Command("status"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–º–æ—â—å
    dp.message.register(handle_help, Command("help"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /learn - –≤—ã–±–æ—Ä –∫—É—Ä—Å–æ–≤
    dp.message.register(handle_learn, Command("learn"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–∫–æ–º–∞–Ω–¥—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /, –Ω–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
    dp.message.register(handle_unknown_command, F.text.startswith("/"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    dp.callback_query.register(handle_level_selection, F.data.startswith("level_"))
    dp.callback_query.register(handle_level_selection, F.data == "show_courses")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤
    dp.callback_query.register(handle_course_selection, F.data.startswith("course_"))
    dp.callback_query.register(handle_course_selection, F.data == "back_to_main")
    dp.callback_query.register(handle_course_selection, F.data == "back_to_courses")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("lesson_"))
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("test_"))
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("start_learning_"))
    dp.callback_query.register(handle_lesson_callback, F.data == "back_to_menu")
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("back_to_course_"))
    dp.callback_query.register(handle_test_answer, F.data.startswith("answer_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
    dp.message.register(handle_voice, F.voice)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
    dp.message.register(handle_photo, F.photo)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    dp.message.register(handle_message)
