"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞ ML Tutor

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥, —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback queries.
"""

import logging
from aiogram import Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

from bot.dialog import clear_dialog, add_user_message, add_assistant_message, get_dialog_history, extract_user_level
from bot.prompts import get_system_prompt, get_welcome_message
from bot.progress import get_user_progress, mark_topic_completed
from llm.client import get_llm_response
from bot.database import Database
from bot.test_prompts import TEST_GENERATION_PROMPT

logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
class LearningProgressTracker:
    def __init__(self):
        pass
    
    def get_user_stats(self, user_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        progress = get_user_progress(user_id)
        return {
            'topics_studied': len(progress),
            'learning_time': '0 –º–∏–Ω'  # –ó–∞–≥–ª—É—à–∫–∞
        }
    
    def update_progress(self, user_id: int, question: str, response: str):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –æ—Ç–º–µ—á–∞–µ–º —Ç–µ–º—É –∫–∞–∫ –∏–∑—É—á–µ–Ω–Ω—É—é
        if any(keyword in question.lower() for keyword in ['–≤–µ–∫—Ç–æ—Ä', '–º–∞—Ç—Ä–∏—Ü–∞', '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω']):
            mark_topic_completed(user_id, 'math_vectors_operations')
        elif any(keyword in question.lower() for keyword in ['–º–∞—Ç—Ä–∏—Ü', '—É–º–Ω–æ–∂–µ–Ω', '—Ç—Ä–∞–Ω—Å–ø–æ–Ω']):
            mark_topic_completed(user_id, 'math_matrices_operations')
        elif any(keyword in question.lower() for keyword in ['—Å–æ–±—Å—Ç–≤–µ–Ω–Ω', 'eigen', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç']):
            mark_topic_completed(user_id, 'math_eigenvalues_vectors')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
progress_tracker = LearningProgressTracker()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


async def handle_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username})")
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞)
    clear_dialog(chat_id)
    
    welcome_text = get_welcome_message("–ë–∞–∑–æ–≤—ã–π")
    await message.answer(welcome_text)


async def handle_learn(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /learn - –≤—ã–±–æ—Ä –∫—É—Ä—Å–æ–≤
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /learn –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã
    courses = []
    for course_id in range(1, 10):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫—É—Ä—Å–æ–≤
        course = db.get_course(course_id)
        if course:
            courses.append(course)
    
    if not courses:
        await message.answer("‚ùå –ö—É—Ä—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫—É—Ä—Å–∞–º–∏
    keyboard_buttons = []
    for course in courses:
        keyboard_buttons.append([
            InlineKeyboardButton(text=f"üìö {course.name}", callback_data=f"course_{course.id}")
        ])
    
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    courses_text = "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:\n\n"
    for course in courses:
        courses_text += f"üìö **{course.name}**\n"
        courses_text += f"   {course.description}\n"
        courses_text += f"   –£—Ä–æ–∫–æ–≤: {course.total_lessons}\n\n"
    
    courses_text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
    
    await message.answer(courses_text, reply_markup=keyboard, parse_mode="Markdown")


async def handle_level(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /level - —Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /level –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üü¢ –ë–∞–∑–æ–≤—ã–π", callback_data="level_beginner"),
            InlineKeyboardButton(text="üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")
        ],
        [
            InlineKeyboardButton(text="üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")
        ]
    ])
    
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:\n\n"
        "üü¢ **–ë–∞–∑–æ–≤—ã–π** - –Ω–∞—á–∏–Ω–∞—é—â–∏–π, –∏–∑—É—á–∞—é –æ—Å–Ω–æ–≤—ã\n"
        "üü° **–°—Ä–µ–¥–Ω–∏–π** - –∏–º–µ—é –æ–ø—ã—Ç, —Ö–æ—á—É —É–≥–ª—É–±–∏—Ç—å –∑–Ω–∞–Ω–∏—è\n"
        "üî¥ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π** - —ç–∫—Å–ø–µ—Ä—Ç, –Ω—É–∂–Ω—ã —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


async def handle_status(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /status –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞
    dialog_history = get_dialog_history(chat_id)
    current_level = extract_user_level(chat_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_stats = progress_tracker.get_user_stats(user_id)
    
    status_text = f"üìä **–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:**\n\n"
    status_text += f"üéØ **–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:** {current_level}\n"
    status_text += f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ:** {len(dialog_history)}\n"
    status_text += f"üìà **–ò–∑—É—á–µ–Ω–Ω—ã—Ö —Ç–µ–º:** {progress_stats.get('topics_studied', 0)}\n"
    status_text += f"‚è±Ô∏è **–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:** {progress_stats.get('learning_time', '0 –º–∏–Ω')}\n\n"
    status_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /level –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π."
    
    await message.answer(status_text, parse_mode="Markdown")


async def handle_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    help_text = """
ü§ñ **ML Tutor Bot - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
‚Ä¢ `/learn` - –í—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
‚Ä¢ `/level` - –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π
‚Ä¢ `/status` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
‚Ä¢ `/profile` - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
‚Ä¢ `/errors` - –ú–æ–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –∫–æ–º–∞–Ω–¥–æ–π `/level`
2. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é
3. –ò–∑—É—á–∞–π—Ç–µ –∫—É—Ä—Å—ã –∫–æ–º–∞–Ω–¥–æ–π `/learn`
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã —Å —Ç–µ—Å—Ç–∞–º–∏
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–º—ã:**
‚Ä¢ –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è ML
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ Python
‚Ä¢ –ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üöÄ
"""
    
    await message.answer(help_text, parse_mode="Markdown")


async def handle_course_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –∫—É—Ä—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("course_"):
        course_id = int(data.split("_")[1])
        course = db.get_course(course_id)
        
        if not course:
            await callback_query.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        progress = db.get_user_progress(user_id, course_id)
        if not progress:
            db.init_user_progress(user_id, course_id)
            progress = db.get_user_progress(user_id, course_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–ª–∞–Ω –∫—É—Ä—Å–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
        plan_text = f"üìö **{course.name}**\n\n"
        plan_text += f"{course.description}\n\n"
        plan_text += f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.completed_lessons}/{course.total_lessons} —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
        plan_text += f"üìç –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {progress.current_lesson}/{course.total_lessons}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–∫–∏ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
        plan_text += "üìã –ü–ª–∞–Ω –∫—É—Ä—Å–∞:\n"
        for i in range(1, course.total_lessons + 1):
            lesson = db.get_lesson(course_id, i)
            if lesson:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É—Ä–æ–∫
                is_completed = progress.completed_lessons >= i
                status = "‚úÖ" if is_completed else "‚≠ï"
                plan_text += f"{status} –£—Ä–æ–∫ {i}: {lesson.title}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard_buttons = []
        
        if progress.current_lesson <= course.total_lessons:
            keyboard_buttons.append([
                InlineKeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data=f"start_learning_{course_id}")
            ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"),
            InlineKeyboardButton(text="‚ùå –ú–æ–∏ –æ—à–∏–±–∫–∏", callback_data="show_errors")
        ])
        
        keyboard_buttons.append([
            InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤", callback_data="back_to_courses")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await callback_query.message.edit_text(plan_text, reply_markup=keyboard, parse_mode="Markdown")
        await callback_query.answer()
    
    elif data == "back_to_courses":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤
        await callback_query.message.delete()
        await handle_learn(callback_query.message)
        await callback_query.answer()
    
    elif data == "back_to_main":
        await callback_query.message.delete()
        await handle_start(callback_query.message)
        await callback_query.answer()


async def handle_main_menu_buttons(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    data = callback_query.data
    
    if data == "show_profile":
        await handle_profile_command(callback_query.message)
        await callback_query.answer()
    
    elif data == "show_errors":
        await handle_errors_command(callback_query.message)
        await callback_query.answer()


async def handle_level_selection(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    # –ú–∞–ø–ø–∏–Ω–≥ callback_data –Ω–∞ —É—Ä–æ–≤–Ω–∏
    level_map = {
        "level_beginner": "–ë–∞–∑–æ–≤—ã–π",
        "level_intermediate": "–°—Ä–µ–¥–Ω–∏–π", 
        "level_advanced": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    }
    
    if data in level_map:
        level = level_map[data]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ë–î)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª —É—Ä–æ–≤–µ–Ω—å –Ω–∞: {level}")
        
        await callback_query.message.edit_text(
            f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: **{level}**\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π.",
            parse_mode="Markdown"
        )
        await callback_query.answer()
        

async def handle_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text
    
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text[:50]}...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_user_message(chat_id, text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    dialog_history = get_dialog_history(chat_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_level = extract_user_level(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è
    system_prompt = get_system_prompt(user_level)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
    try:
        response = await get_llm_response(dialog_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_assistant_message(chat_id, response)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_tracker.update_progress(user_id, text, response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def show_lesson(message: Message, course_id: int, lesson_number: int):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    lesson = db.get_lesson(course_id, lesson_number)
    if not lesson:
        await message.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    course = db.get_course(course_id)
    progress = db.get_user_progress(user_id, course_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if lesson_number > 1:
        nav_buttons.append(InlineKeyboardButton(text="‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"lesson_{course_id}_{lesson_number-1}"))
    
    if lesson_number < course.total_lessons:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚Üí", callback_data=f"lesson_{course_id}_{lesson_number+1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard_buttons.append([
        InlineKeyboardButton(text="üè† –ù–∞–∑–∞–¥", callback_data="back_to_menu"),
        InlineKeyboardButton(text="üß™ –¢–µ—Å—Ç", callback_data=f"test_{lesson.id}")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    lesson_text = f"üìò –£—Ä–æ–∫ {lesson_number}/{course.total_lessons}: {lesson.title}\n\n{lesson.content}"
    
    await message.answer(lesson_text, reply_markup=keyboard)


async def handle_lesson_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–∫–∞–º –∏ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("start_learning_"):
        # –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
        course_id = int(data.split("_")[2])
        progress = db.get_user_progress(user_id, course_id)
        if progress:
            await callback_query.message.delete()
            await show_lesson(callback_query.message, course_id, progress.current_lesson)
        await callback_query.answer()
    
    elif data.startswith("lesson_"):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º
        parts = data.split("_")
        course_id = int(parts[1])
        lesson_number = int(parts[2])
        
        await callback_query.message.delete()
        await show_lesson(callback_query.message, course_id, lesson_number)
        await callback_query.answer()
    
    elif data.startswith("test_"):
        # –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        lesson_id = int(data.split("_")[1])
        await start_lesson_test(callback_query, lesson_id)
    
    elif data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback_query.message.delete()
        await handle_start(callback_query.message)
        await callback_query.answer()


async def start_lesson_test(callback_query: CallbackQuery, lesson_id: int):
    """
    –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É—Ä–æ–∫—É
    """
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–∫
    lesson = None
    for course_id in range(1, 10):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫—É—Ä—Å–æ–≤
        for lesson_num in range(1, 20):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 —É—Ä–æ–∫–æ–≤
            l = db.get_lesson(course_id, lesson_num)
            if l and l.id == lesson_id:
                lesson = l
                break
        if lesson:
            break
    
    if not lesson:
        await callback_query.answer("‚ùå –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    try:
        prompt = TEST_GENERATION_PROMPT.format(
            lesson_title=lesson.title,
            lesson_content=lesson.content
        )
        
        response = await get_llm_response([{"role": "user", "content": prompt}])
        
        logger.info(f"–û—Ç–≤–µ—Ç LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {response[:300]}...")
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –º–æ–¥–µ–ª–∏
        clean_response = response.strip()
        if clean_response.startswith('<s>'):
            clean_response = clean_response[3:].strip()
        if clean_response.startswith('</s>'):
            clean_response = clean_response[:-4].strip()
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        lines = clean_response.split('\n')
        question = ""
        options = []
        correct_answer = ""
        
        for line in lines:
            line = line.strip()
            if line.startswith("–í–æ–ø—Ä–æ—Å:"):
                question = line.replace("–í–æ–ø—Ä–æ—Å:", "").strip()
            elif line.startswith("A)"):
                options.append(line.replace("A)", "").strip())
            elif line.startswith("B)"):
                options.append(line.replace("B)", "").strip())
            elif line.startswith("C)"):
                options.append(line.replace("C)", "").strip())
            elif line.startswith("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"):
                correct_answer = line.replace("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", "").strip()
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if not question or len(options) != 3 or not correct_answer:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç LLM: {clean_response[:200]}...")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –¥—Ä—É–≥–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
            for line in lines:
                line = line.strip()
                if not question and ("?" in line or "—Ä–∞–≤–µ–Ω" in line or "—Ä–∞–≤–Ω–∞" in line):
                    question = line
                elif line.startswith("A)") or line.startswith("A."):
                    if len(options) < 3:  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                        options.append(line[2:].strip())
                elif line.startswith("B)") or line.startswith("B."):
                    if len(options) < 3:
                        options.append(line[2:].strip())
                elif line.startswith("C)") or line.startswith("C."):
                    if len(options) < 3:
                        options.append(line[2:].strip())
                elif "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π" in line.lower() and ("A" in line or "B" in line or "C" in line):
                    correct_answer = line.split()[-1].strip()
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if correct_answer in ['A', 'B', 'C']:
            correct_answer = correct_answer
        elif correct_answer.startswith('A)'):
            correct_answer = 'A'
        elif correct_answer.startswith('B)'):
            correct_answer = 'B'
        elif correct_answer.startswith('C)'):
            correct_answer = 'C'
        
        if not question or len(options) != 3 or not correct_answer:
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç. –í–æ–ø—Ä–æ—Å: '{question}', –í–∞—Ä–∏–∞–Ω—Ç—ã: {options}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: '{correct_answer}'")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=f"A) {options[0]}", callback_data=f"answer_{lesson_id}_A_{correct_answer}"),
                InlineKeyboardButton(text=f"B) {options[1]}", callback_data=f"answer_{lesson_id}_B_{correct_answer}")
            ],
            [
                InlineKeyboardButton(text=f"C) {options[2]}", callback_data=f"answer_{lesson_id}_C_{correct_answer}")
            ],
            [
                InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"test_{lesson_id}")
            ]
        ])
        
        test_text = f"üß™ –¢–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É: {lesson.title}\n\n{question}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:"
        
        await callback_query.message.edit_text(test_text, reply_markup=keyboard)
        await callback_query.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def handle_test_answer(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç
    """
    user_id = callback_query.from_user.id
    data = callback_query.data
    
    if data.startswith("answer_"):
        parts = data.split("_")
        lesson_id = int(parts[1])
        user_answer = parts[2]
        correct_answer = parts[3]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = user_answer == correct_answer
        
        if is_correct:
            # –û—Ç–º–µ—á–∞–µ–º —É—Ä–æ–∫ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            db.complete_lesson(user_id, lesson_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            lesson = None
            course_id = None
            for cid in range(1, 10):
                for ln in range(1, 20):
                    l = db.get_lesson(cid, ln)
                    if l and l.id == lesson_id:
                        lesson = l
                        course_id = cid
                        break
                if lesson:
                    break
            
            if lesson and course_id:
                progress = db.get_user_progress(user_id, course_id)
                if progress:
                    completed_lessons = progress.completed_lessons + 1
                    db.update_user_progress(user_id, course_id, lesson.lesson_number, completed_lessons)
            
            await callback_query.message.edit_text(
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—Ä–æ–∫—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫", callback_data=f"lesson_{course_id}_{lesson.lesson_number+1}"),
                        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]
                ])
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É
            db.add_test_error(user_id, lesson_id, "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", correct_answer, user_answer)
            
            await callback_query.message.edit_text(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"test_{lesson_id}"),
                        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
                    ]
                ])
            )
        
        await callback_query.answer()


async def handle_profile_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile - –ø–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫—É—Ä—Å–∞–º
    courses_stats = []
    for course_id in range(1, 10):  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –∫—É—Ä—Å–æ–≤
        course = db.get_course(course_id)
        if course:
            stats = db.get_user_course_stats(user_id, course_id)
            if stats['completed_lessons'] > 0 or stats['current_lesson'] > 1:
                courses_stats.append({
                    'name': course.name,
                    'current': stats['current_lesson'],
                    'total': course.total_lessons,
                    'completed': stats['completed_lessons'],
                    'errors': stats['error_count']
                })
    
    if not courses_stats:
        await message.answer("üìä –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–∑—É—á–∞—Ç—å –∫—É—Ä—Å—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /learn –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
    
    for stats in courses_stats:
        profile_text += f"üìö {stats['name']}: {stats['completed']}/{stats['total']} —É—Ä–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n"
        profile_text += f"üìç –¢–µ–∫—É—â–∏–π —É—Ä–æ–∫: {stats['current']}/{stats['total']}\n"
        profile_text += f"‚ùå –û—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö: {stats['errors']}\n\n"
    
    profile_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /errors –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö."
    
    await message.answer(profile_text)


async def handle_errors_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /errors - –ø–æ–∫–∞–∑ –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    
    errors = db.get_user_test_errors(user_id)
    
    if not errors:
        await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Å—Ç–∞—Ö!")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ —É—Ä–æ–∫–∞–º
    errors_by_lesson = {}
    for error in errors:
        if error.lesson_id not in errors_by_lesson:
            errors_by_lesson[error.lesson_id] = []
        errors_by_lesson[error.lesson_id].append(error)
    
    errors_text = "‚ùå –í–∞—à–∏ –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö:\n\n"
    
    for lesson_id, lesson_errors in errors_by_lesson.items():
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Ä–æ–∫–µ
        lesson = None
        for course_id in range(1, 10):
            for lesson_num in range(1, 20):
                l = db.get_lesson(course_id, lesson_num)
                if l and l.id == lesson_id:
                    lesson = l
                    break
            if lesson:
                break
        
        if lesson:
            errors_text += f"üìò {lesson.title}:\n"
            for error in lesson_errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                errors_text += f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {error.question[:50]}...\n"
                errors_text += f"  –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {error.correct_answer}\n"
                errors_text += f"  –í–∞—à –æ—Ç–≤–µ—Ç: {error.user_answer}\n\n"
    
    errors_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã –∑–∞–Ω–æ–≤–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!"
    
    await message.answer(errors_text)


async def handle_voice(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
    """
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
    await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
    
    –ü–æ—Ä—è–¥–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–∂–µ–Ω: –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ 
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–º–∞–Ω–¥—ã) –¥–æ–ª–∂–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ä–∞–Ω—å—à–µ –æ–±—â–∏—Ö
    
    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä aiogram –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    """
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞
    dp.message.register(handle_start, Command("start"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /level - —Å–º–µ–Ω–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π
    dp.message.register(handle_level, Command("level"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    dp.message.register(handle_status, Command("status"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–º–æ—â—å
    dp.message.register(handle_help, Command("help"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /learn - –≤—ã–±–æ—Ä –∫—É—Ä—Å–æ–≤
    dp.message.register(handle_learn, Command("learn"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile - –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.message.register(handle_profile_command, Command("profile"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /errors - –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
    dp.message.register(handle_errors_command, Command("errors"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è
    dp.callback_query.register(handle_level_selection, F.data.startswith("level_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–æ–≤
    dp.callback_query.register(handle_course_selection, F.data.startswith("course_"))
    dp.callback_query.register(handle_course_selection, F.data == "back_to_main")
    dp.callback_query.register(handle_course_selection, F.data == "back_to_courses")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    dp.callback_query.register(handle_main_menu_buttons, F.data.in_([
        "show_profile", "show_errors"
    ]))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫—É—Ä—Å–æ–≤
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("lesson_"))
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("test_"))
    dp.callback_query.register(handle_lesson_callback, F.data.startswith("start_learning_"))
    dp.callback_query.register(handle_lesson_callback, F.data == "back_to_menu")
    dp.callback_query.register(handle_test_answer, F.data.startswith("answer_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π)
    dp.message.register(handle_voice, F.voice)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    dp.message.register(handle_message)
